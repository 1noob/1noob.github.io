{"ast":null,"code":"import _classCallCheck from \"/Users/mac/WebstormProjects/github-page/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mac/WebstormProjects/github-page/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { InjectionToken, ɵɵdefineInjectable, ɵɵinject, Injectable, Optional, Inject } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, mapTo } from 'rxjs/operators';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * User should provide an object implements this interface to set global configurations.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nvar NZ_CONFIG = new InjectionToken('nz-config');\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nvar isDefined = function isDefined(value) {\n  return value !== undefined;\n};\n\nvar ɵ0 = isDefined;\n\nvar NzConfigService = /*#__PURE__*/function () {\n  function NzConfigService(defaultConfig) {\n    _classCallCheck(this, NzConfigService);\n\n    this.configUpdated$ = new Subject();\n    this.config = defaultConfig || {};\n  }\n\n  _createClass(NzConfigService, [{\n    key: \"getConfigForComponent\",\n    value: function getConfigForComponent(componentName) {\n      return this.config[componentName];\n    }\n  }, {\n    key: \"getConfigChangeEventForComponent\",\n    value: function getConfigChangeEventForComponent(componentName) {\n      return this.configUpdated$.pipe(filter(function (n) {\n        return n === componentName;\n      }), mapTo(undefined));\n    }\n  }, {\n    key: \"set\",\n    value: function set(componentName, value) {\n      this.config[componentName] = Object.assign(Object.assign({}, this.config[componentName]), value);\n      this.configUpdated$.next(componentName);\n    }\n  }]);\n\n  return NzConfigService;\n}();\n\nNzConfigService.ɵfac = function NzConfigService_Factory(t) {\n  return new (t || NzConfigService)(ɵngcc0.ɵɵinject(NZ_CONFIG, 8));\n};\n\nNzConfigService.ɵprov = ɵɵdefineInjectable({\n  factory: function NzConfigService_Factory() {\n    return new NzConfigService(ɵɵinject(NZ_CONFIG, 8));\n  },\n  token: NzConfigService,\n  providedIn: \"root\"\n});\n\nNzConfigService.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [NZ_CONFIG]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzConfigService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [NZ_CONFIG]\n      }]\n    }];\n  }, null);\n})(); // tslint:disable:no-invalid-this\n\n/**\n * This decorator is used to decorate properties. If a property is decorated, it would try to load default value from\n * config.\n */\n// tslint:disable-next-line:typedef\n\n\nfunction WithConfig() {\n  return function ConfigDecorator(target, propName, originalDescriptor) {\n    var privatePropName = \"$$__assignedValue__\".concat(propName);\n    Object.defineProperty(target, privatePropName, {\n      configurable: true,\n      writable: true,\n      enumerable: false\n    });\n    return {\n      get: function get() {\n        var originalValue = (originalDescriptor === null || originalDescriptor === void 0 ? void 0 : originalDescriptor.get) ? originalDescriptor.get.bind(this)() : this[privatePropName];\n        var assignedByUser = ((this.assignmentCount || {})[propName] || 0) > 1;\n\n        if (assignedByUser && isDefined(originalValue)) {\n          return originalValue;\n        }\n\n        var componentConfig = this.nzConfigService.getConfigForComponent(this._nzModuleName) || {};\n        var configValue = componentConfig[propName];\n        var ret = isDefined(configValue) ? configValue : originalValue;\n        return ret;\n      },\n      set: function set(value) {\n        // If the value is assigned, we consider the newly assigned value as 'assigned by user'.\n        this.assignmentCount = this.assignmentCount || {};\n        this.assignmentCount[propName] = (this.assignmentCount[propName] || 0) + 1;\n\n        if (originalDescriptor === null || originalDescriptor === void 0 ? void 0 : originalDescriptor.set) {\n          originalDescriptor.set.bind(this)(value);\n        } else {\n          this[privatePropName] = value;\n        }\n      },\n      configurable: true,\n      enumerable: true\n    };\n  };\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NZ_CONFIG, NzConfigService, WithConfig, ɵ0 }; //# sourceMappingURL=ng-zorro-antd-core-config.js.map","map":{"version":3,"sources":["/Users/mac/WebstormProjects/github-page/node_modules/ng-zorro-antd/__ivy_ngcc__/fesm2015/ng-zorro-antd-core-config.js"],"names":["InjectionToken","ɵɵdefineInjectable","ɵɵinject","Injectable","Optional","Inject","Subject","filter","mapTo","ɵngcc0","NZ_CONFIG","isDefined","value","undefined","ɵ0","NzConfigService","defaultConfig","configUpdated$","config","componentName","pipe","n","Object","assign","next","ɵfac","NzConfigService_Factory","t","ɵprov","factory","token","providedIn","ctorParameters","type","decorators","args","ngDevMode","ɵsetClassMetadata","WithConfig","ConfigDecorator","target","propName","originalDescriptor","privatePropName","defineProperty","configurable","writable","enumerable","get","originalValue","bind","assignedByUser","assignmentCount","componentConfig","nzConfigService","getConfigForComponent","_nzModuleName","configValue","ret","set"],"mappings":"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","sourcesContent":["import { InjectionToken, ɵɵdefineInjectable, ɵɵinject, Injectable, Optional, Inject } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, mapTo } from 'rxjs/operators';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n/**\n * User should provide an object implements this interface to set global configurations.\n */\nimport * as ɵngcc0 from '@angular/core';\nconst NZ_CONFIG = new InjectionToken('nz-config');\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nconst isDefined = function (value) {\n    return value !== undefined;\n};\nconst ɵ0 = isDefined;\nclass NzConfigService {\n    constructor(defaultConfig) {\n        this.configUpdated$ = new Subject();\n        this.config = defaultConfig || {};\n    }\n    getConfigForComponent(componentName) {\n        return this.config[componentName];\n    }\n    getConfigChangeEventForComponent(componentName) {\n        return this.configUpdated$.pipe(filter(n => n === componentName), mapTo(undefined));\n    }\n    set(componentName, value) {\n        this.config[componentName] = Object.assign(Object.assign({}, this.config[componentName]), value);\n        this.configUpdated$.next(componentName);\n    }\n}\nNzConfigService.ɵfac = function NzConfigService_Factory(t) { return new (t || NzConfigService)(ɵngcc0.ɵɵinject(NZ_CONFIG, 8)); };\nNzConfigService.ɵprov = ɵɵdefineInjectable({ factory: function NzConfigService_Factory() { return new NzConfigService(ɵɵinject(NZ_CONFIG, 8)); }, token: NzConfigService, providedIn: \"root\" });\nNzConfigService.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NZ_CONFIG,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzConfigService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [NZ_CONFIG]\n            }] }]; }, null); })();\n// tslint:disable:no-invalid-this\n/**\n * This decorator is used to decorate properties. If a property is decorated, it would try to load default value from\n * config.\n */\n// tslint:disable-next-line:typedef\nfunction WithConfig() {\n    return function ConfigDecorator(target, propName, originalDescriptor) {\n        const privatePropName = `$$__assignedValue__${propName}`;\n        Object.defineProperty(target, privatePropName, {\n            configurable: true,\n            writable: true,\n            enumerable: false\n        });\n        return {\n            get() {\n                const originalValue = (originalDescriptor === null || originalDescriptor === void 0 ? void 0 : originalDescriptor.get) ? originalDescriptor.get.bind(this)() : this[privatePropName];\n                const assignedByUser = ((this.assignmentCount || {})[propName] || 0) > 1;\n                if (assignedByUser && isDefined(originalValue)) {\n                    return originalValue;\n                }\n                const componentConfig = this.nzConfigService.getConfigForComponent(this._nzModuleName) || {};\n                const configValue = componentConfig[propName];\n                const ret = isDefined(configValue) ? configValue : originalValue;\n                return ret;\n            },\n            set(value) {\n                // If the value is assigned, we consider the newly assigned value as 'assigned by user'.\n                this.assignmentCount = this.assignmentCount || {};\n                this.assignmentCount[propName] = (this.assignmentCount[propName] || 0) + 1;\n                if (originalDescriptor === null || originalDescriptor === void 0 ? void 0 : originalDescriptor.set) {\n                    originalDescriptor.set.bind(this)(value);\n                }\n                else {\n                    this[privatePropName] = value;\n                }\n            },\n            configurable: true,\n            enumerable: true\n        };\n    };\n}\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NZ_CONFIG, NzConfigService, WithConfig, ɵ0 };\n\n//# sourceMappingURL=ng-zorro-antd-core-config.js.map"]},"metadata":{},"sourceType":"module"}