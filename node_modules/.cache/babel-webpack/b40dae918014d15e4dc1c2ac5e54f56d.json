{"ast":null,"code":"import _classCallCheck from \"/Users/mac/WebstormProjects/github-page/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mac/WebstormProjects/github-page/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { ɵɵdefineInjectable, Injectable, ɵɵinject, NgModule } from '@angular/core';\nimport { coerceElement } from '@angular/cdk/coercion';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { Observable, Subject } from 'rxjs';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Factory that creates a new ResizeObserver and allows us to stub it out in unit tests.\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar NzResizeObserverFactory = /*#__PURE__*/function () {\n  function NzResizeObserverFactory() {\n    _classCallCheck(this, NzResizeObserverFactory);\n  }\n\n  _createClass(NzResizeObserverFactory, [{\n    key: \"create\",\n    value: function create(callback) {\n      return typeof ResizeObserver === 'undefined' ? null : new ResizeObserver(callback);\n    }\n  }]);\n\n  return NzResizeObserverFactory;\n}();\n\nNzResizeObserverFactory.ɵfac = function NzResizeObserverFactory_Factory(t) {\n  return new (t || NzResizeObserverFactory)();\n};\n\nNzResizeObserverFactory.ɵprov = ɵɵdefineInjectable({\n  factory: function NzResizeObserverFactory_Factory() {\n    return new NzResizeObserverFactory();\n  },\n  token: NzResizeObserverFactory,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzResizeObserverFactory, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/** An injectable service that allows watching elements for changes to their content. */\n\n\nvar NzResizeObserver = /*#__PURE__*/function () {\n  function NzResizeObserver(nzResizeObserverFactory) {\n    _classCallCheck(this, NzResizeObserver);\n\n    this.nzResizeObserverFactory = nzResizeObserverFactory;\n    /** Keeps track of the existing ResizeObservers so they can be reused. */\n\n    this.observedElements = new Map();\n  }\n\n  _createClass(NzResizeObserver, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _this = this;\n\n      this.observedElements.forEach(function (_, element) {\n        return _this.cleanupObserver(element);\n      });\n    }\n  }, {\n    key: \"observe\",\n    value: function observe(elementOrRef) {\n      var _this2 = this;\n\n      var element = coerceElement(elementOrRef);\n      return new Observable(function (observer) {\n        var stream = _this2.observeElement(element);\n\n        var subscription = stream.subscribe(observer);\n        return function () {\n          subscription.unsubscribe();\n\n          _this2.unobserveElement(element);\n        };\n      });\n    }\n    /**\n     * Observes the given element by using the existing ResizeObserver if available, or creating a\n     * new one if not.\n     */\n\n  }, {\n    key: \"observeElement\",\n    value: function observeElement(element) {\n      if (!this.observedElements.has(element)) {\n        var stream = new Subject();\n        var observer = this.nzResizeObserverFactory.create(function (mutations) {\n          return stream.next(mutations);\n        });\n\n        if (observer) {\n          observer.observe(element);\n        }\n\n        this.observedElements.set(element, {\n          observer: observer,\n          stream: stream,\n          count: 1\n        });\n      } else {\n        this.observedElements.get(element).count++;\n      }\n\n      return this.observedElements.get(element).stream;\n    }\n    /**\n     * Un-observes the given element and cleans up the underlying ResizeObserver if nobody else is\n     * observing this element.\n     */\n\n  }, {\n    key: \"unobserveElement\",\n    value: function unobserveElement(element) {\n      if (this.observedElements.has(element)) {\n        this.observedElements.get(element).count--;\n\n        if (!this.observedElements.get(element).count) {\n          this.cleanupObserver(element);\n        }\n      }\n    }\n    /** Clean up the underlying ResizeObserver for the specified element. */\n\n  }, {\n    key: \"cleanupObserver\",\n    value: function cleanupObserver(element) {\n      if (this.observedElements.has(element)) {\n        var _this$observedElement = this.observedElements.get(element),\n            observer = _this$observedElement.observer,\n            stream = _this$observedElement.stream;\n\n        if (observer) {\n          observer.disconnect();\n        }\n\n        stream.complete();\n        this.observedElements.delete(element);\n      }\n    }\n  }]);\n\n  return NzResizeObserver;\n}();\n\nNzResizeObserver.ɵfac = function NzResizeObserver_Factory(t) {\n  return new (t || NzResizeObserver)(ɵngcc0.ɵɵinject(NzResizeObserverFactory));\n};\n\nNzResizeObserver.ɵprov = ɵɵdefineInjectable({\n  factory: function NzResizeObserver_Factory() {\n    return new NzResizeObserver(ɵɵinject(NzResizeObserverFactory));\n  },\n  token: NzResizeObserver,\n  providedIn: \"root\"\n});\n\nNzResizeObserver.ctorParameters = function () {\n  return [{\n    type: NzResizeObserverFactory\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzResizeObserver, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: NzResizeObserverFactory\n    }];\n  }, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzResizeObserversModule = function NzResizeObserversModule() {\n  _classCallCheck(this, NzResizeObserversModule);\n};\n\nNzResizeObserversModule.ɵfac = function NzResizeObserversModule_Factory(t) {\n  return new (t || NzResizeObserversModule)();\n};\n\nNzResizeObserversModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: NzResizeObserversModule\n});\nNzResizeObserversModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [NzResizeObserverFactory]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzResizeObserversModule, [{\n    type: NgModule,\n    args: [{\n      providers: [NzResizeObserverFactory]\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NzResizeObserver, NzResizeObserversModule, NzResizeObserverFactory as ɵNzResizeObserverFactory }; //# sourceMappingURL=ng-zorro-antd-core-resize-observers.js.map","map":{"version":3,"sources":["/Users/mac/WebstormProjects/github-page/node_modules/ng-zorro-antd/__ivy_ngcc__/fesm2015/ng-zorro-antd-core-resize-observers.js"],"names":["ɵɵdefineInjectable","Injectable","ɵɵinject","NgModule","coerceElement","ResizeObserver","Observable","Subject","ɵngcc0","NzResizeObserverFactory","callback","ɵfac","NzResizeObserverFactory_Factory","t","ɵprov","factory","token","providedIn","ngDevMode","ɵsetClassMetadata","type","args","NzResizeObserver","nzResizeObserverFactory","observedElements","Map","forEach","_","element","cleanupObserver","elementOrRef","observer","stream","observeElement","subscription","subscribe","unsubscribe","unobserveElement","has","create","mutations","next","observe","set","count","get","disconnect","complete","delete","NzResizeObserver_Factory","ctorParameters","NzResizeObserversModule","NzResizeObserversModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","ɵNzResizeObserverFactory"],"mappings":"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","sourcesContent":["import { ɵɵdefineInjectable, Injectable, ɵɵinject, NgModule } from '@angular/core';\nimport { coerceElement } from '@angular/cdk/coercion';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { Observable, Subject } from 'rxjs';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n/**\n * Factory that creates a new ResizeObserver and allows us to stub it out in unit tests.\n */\nimport * as ɵngcc0 from '@angular/core';\nclass NzResizeObserverFactory {\n    create(callback) {\n        return typeof ResizeObserver === 'undefined' ? null : new ResizeObserver(callback);\n    }\n}\nNzResizeObserverFactory.ɵfac = function NzResizeObserverFactory_Factory(t) { return new (t || NzResizeObserverFactory)(); };\nNzResizeObserverFactory.ɵprov = ɵɵdefineInjectable({ factory: function NzResizeObserverFactory_Factory() { return new NzResizeObserverFactory(); }, token: NzResizeObserverFactory, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzResizeObserverFactory, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], null, null); })();\n/** An injectable service that allows watching elements for changes to their content. */\nclass NzResizeObserver {\n    constructor(nzResizeObserverFactory) {\n        this.nzResizeObserverFactory = nzResizeObserverFactory;\n        /** Keeps track of the existing ResizeObservers so they can be reused. */\n        this.observedElements = new Map();\n    }\n    ngOnDestroy() {\n        this.observedElements.forEach((_, element) => this.cleanupObserver(element));\n    }\n    observe(elementOrRef) {\n        const element = coerceElement(elementOrRef);\n        return new Observable((observer) => {\n            const stream = this.observeElement(element);\n            const subscription = stream.subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n                this.unobserveElement(element);\n            };\n        });\n    }\n    /**\n     * Observes the given element by using the existing ResizeObserver if available, or creating a\n     * new one if not.\n     */\n    observeElement(element) {\n        if (!this.observedElements.has(element)) {\n            const stream = new Subject();\n            const observer = this.nzResizeObserverFactory.create(mutations => stream.next(mutations));\n            if (observer) {\n                observer.observe(element);\n            }\n            this.observedElements.set(element, { observer, stream, count: 1 });\n        }\n        else {\n            this.observedElements.get(element).count++;\n        }\n        return this.observedElements.get(element).stream;\n    }\n    /**\n     * Un-observes the given element and cleans up the underlying ResizeObserver if nobody else is\n     * observing this element.\n     */\n    unobserveElement(element) {\n        if (this.observedElements.has(element)) {\n            this.observedElements.get(element).count--;\n            if (!this.observedElements.get(element).count) {\n                this.cleanupObserver(element);\n            }\n        }\n    }\n    /** Clean up the underlying ResizeObserver for the specified element. */\n    cleanupObserver(element) {\n        if (this.observedElements.has(element)) {\n            const { observer, stream } = this.observedElements.get(element);\n            if (observer) {\n                observer.disconnect();\n            }\n            stream.complete();\n            this.observedElements.delete(element);\n        }\n    }\n}\nNzResizeObserver.ɵfac = function NzResizeObserver_Factory(t) { return new (t || NzResizeObserver)(ɵngcc0.ɵɵinject(NzResizeObserverFactory)); };\nNzResizeObserver.ɵprov = ɵɵdefineInjectable({ factory: function NzResizeObserver_Factory() { return new NzResizeObserver(ɵɵinject(NzResizeObserverFactory)); }, token: NzResizeObserver, providedIn: \"root\" });\nNzResizeObserver.ctorParameters = () => [\n    { type: NzResizeObserverFactory }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzResizeObserver, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: NzResizeObserverFactory }]; }, null); })();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzResizeObserversModule {\n}\nNzResizeObserversModule.ɵfac = function NzResizeObserversModule_Factory(t) { return new (t || NzResizeObserversModule)(); };\nNzResizeObserversModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NzResizeObserversModule });\nNzResizeObserversModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [NzResizeObserverFactory] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzResizeObserversModule, [{\n        type: NgModule,\n        args: [{\n                providers: [NzResizeObserverFactory]\n            }]\n    }], null, null); })();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzResizeObserver, NzResizeObserversModule, NzResizeObserverFactory as ɵNzResizeObserverFactory };\n\n//# sourceMappingURL=ng-zorro-antd-core-resize-observers.js.map"]},"metadata":{},"sourceType":"module"}