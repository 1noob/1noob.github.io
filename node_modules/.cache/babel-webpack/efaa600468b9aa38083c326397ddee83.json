{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/mac/WebstormProjects/github-page/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/mac/WebstormProjects/github-page/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mac/WebstormProjects/github-page/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { CommonModule } from '@angular/common';\nimport { TemplateRef, Directive, ViewContainerRef, Input, NgModule } from '@angular/core';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar NzStringTemplateOutletDirective = /*#__PURE__*/function () {\n  function NzStringTemplateOutletDirective(viewContainer, templateRef) {\n    _classCallCheck(this, NzStringTemplateOutletDirective);\n\n    this.viewContainer = viewContainer;\n    this.templateRef = templateRef;\n    this.embeddedViewRef = null;\n    this.context = new NzStringTemplateOutletContext();\n    this.nzStringTemplateOutletContext = null;\n    this.nzStringTemplateOutlet = null;\n  }\n\n  _createClass(NzStringTemplateOutletDirective, [{\n    key: \"recreateView\",\n    value: function recreateView() {\n      this.viewContainer.clear();\n      var isTemplateRef = this.nzStringTemplateOutlet instanceof TemplateRef;\n      var templateRef = isTemplateRef ? this.nzStringTemplateOutlet : this.templateRef;\n      this.embeddedViewRef = this.viewContainer.createEmbeddedView(templateRef, isTemplateRef ? this.nzStringTemplateOutletContext : this.context);\n    }\n  }, {\n    key: \"updateContext\",\n    value: function updateContext() {\n      var isTemplateRef = this.nzStringTemplateOutlet instanceof TemplateRef;\n      var newCtx = isTemplateRef ? this.nzStringTemplateOutletContext : this.context;\n      var oldCtx = this.embeddedViewRef.context;\n\n      if (newCtx) {\n        for (var _i = 0, _Object$keys = Object.keys(newCtx); _i < _Object$keys.length; _i++) {\n          var propName = _Object$keys[_i];\n          oldCtx[propName] = newCtx[propName];\n        }\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var nzStringTemplateOutletContext = changes.nzStringTemplateOutletContext,\n          nzStringTemplateOutlet = changes.nzStringTemplateOutlet;\n\n      var shouldRecreateView = function shouldRecreateView() {\n        var shouldOutletRecreate = false;\n\n        if (nzStringTemplateOutlet) {\n          if (nzStringTemplateOutlet.firstChange) {\n            shouldOutletRecreate = true;\n          } else {\n            var isPreviousOutletTemplate = nzStringTemplateOutlet.previousValue instanceof TemplateRef;\n            var isCurrentOutletTemplate = nzStringTemplateOutlet.currentValue instanceof TemplateRef;\n            shouldOutletRecreate = isPreviousOutletTemplate || isCurrentOutletTemplate;\n          }\n        }\n\n        var hasContextShapeChanged = function hasContextShapeChanged(ctxChange) {\n          var prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n          var currCtxKeys = Object.keys(ctxChange.currentValue || {});\n\n          if (prevCtxKeys.length === currCtxKeys.length) {\n            var _iterator = _createForOfIteratorHelper(currCtxKeys),\n                _step;\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var propName = _step.value;\n\n                if (prevCtxKeys.indexOf(propName) === -1) {\n                  return true;\n                }\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n\n            return false;\n          } else {\n            return true;\n          }\n        };\n\n        var shouldContextRecreate = nzStringTemplateOutletContext && hasContextShapeChanged(nzStringTemplateOutletContext);\n        return shouldContextRecreate || shouldOutletRecreate;\n      };\n\n      if (nzStringTemplateOutlet) {\n        this.context.$implicit = nzStringTemplateOutlet.currentValue;\n      }\n\n      var recreateView = shouldRecreateView();\n\n      if (recreateView) {\n        /** recreate view when context shape or outlet change **/\n        this.recreateView();\n      } else {\n        /** update context **/\n        this.updateContext();\n      }\n    }\n  }], [{\n    key: \"ngTemplateContextGuard\",\n    value: function ngTemplateContextGuard(_dir, _ctx) {\n      return true;\n    }\n  }]);\n\n  return NzStringTemplateOutletDirective;\n}();\n\nNzStringTemplateOutletDirective.ɵfac = function NzStringTemplateOutletDirective_Factory(t) {\n  return new (t || NzStringTemplateOutletDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nNzStringTemplateOutletDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: NzStringTemplateOutletDirective,\n  selectors: [[\"\", \"nzStringTemplateOutlet\", \"\"]],\n  inputs: {\n    nzStringTemplateOutletContext: \"nzStringTemplateOutletContext\",\n    nzStringTemplateOutlet: \"nzStringTemplateOutlet\"\n  },\n  exportAs: [\"nzStringTemplateOutlet\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nNzStringTemplateOutletDirective.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }, {\n    type: TemplateRef\n  }];\n};\n\nNzStringTemplateOutletDirective.propDecorators = {\n  nzStringTemplateOutletContext: [{\n    type: Input\n  }],\n  nzStringTemplateOutlet: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzStringTemplateOutletDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[nzStringTemplateOutlet]',\n      exportAs: 'nzStringTemplateOutlet'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.TemplateRef\n    }];\n  }, {\n    nzStringTemplateOutletContext: [{\n      type: Input\n    }],\n    nzStringTemplateOutlet: [{\n      type: Input\n    }]\n  });\n})();\n\nvar NzStringTemplateOutletContext = function NzStringTemplateOutletContext() {\n  _classCallCheck(this, NzStringTemplateOutletContext);\n};\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzOutletModule = function NzOutletModule() {\n  _classCallCheck(this, NzOutletModule);\n};\n\nNzOutletModule.ɵfac = function NzOutletModule_Factory(t) {\n  return new (t || NzOutletModule)();\n};\n\nNzOutletModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: NzOutletModule\n});\nNzOutletModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzOutletModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      exports: [NzStringTemplateOutletDirective],\n      declarations: [NzStringTemplateOutletDirective]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NzOutletModule, {\n    declarations: function declarations() {\n      return [NzStringTemplateOutletDirective];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [NzStringTemplateOutletDirective];\n    }\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NzOutletModule, NzStringTemplateOutletDirective }; //# sourceMappingURL=ng-zorro-antd-core-outlet.js.map","map":{"version":3,"sources":["/Users/mac/WebstormProjects/github-page/node_modules/ng-zorro-antd/__ivy_ngcc__/fesm2015/ng-zorro-antd-core-outlet.js"],"names":["CommonModule","TemplateRef","Directive","ViewContainerRef","Input","NgModule","ɵngcc0","NzStringTemplateOutletDirective","viewContainer","templateRef","embeddedViewRef","context","NzStringTemplateOutletContext","nzStringTemplateOutletContext","nzStringTemplateOutlet","clear","isTemplateRef","createEmbeddedView","newCtx","oldCtx","Object","keys","propName","changes","shouldRecreateView","shouldOutletRecreate","firstChange","isPreviousOutletTemplate","previousValue","isCurrentOutletTemplate","currentValue","hasContextShapeChanged","ctxChange","prevCtxKeys","currCtxKeys","length","indexOf","shouldContextRecreate","$implicit","recreateView","updateContext","_dir","_ctx","ɵfac","NzStringTemplateOutletDirective_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","inputs","exportAs","features","ɵɵNgOnChangesFeature","ctorParameters","propDecorators","ngDevMode","ɵsetClassMetadata","args","selector","NzOutletModule","NzOutletModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"mappings":"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","sourcesContent":["import { CommonModule } from '@angular/common';\nimport { TemplateRef, Directive, ViewContainerRef, Input, NgModule } from '@angular/core';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nimport * as ɵngcc0 from '@angular/core';\nclass NzStringTemplateOutletDirective {\n    constructor(viewContainer, templateRef) {\n        this.viewContainer = viewContainer;\n        this.templateRef = templateRef;\n        this.embeddedViewRef = null;\n        this.context = new NzStringTemplateOutletContext();\n        this.nzStringTemplateOutletContext = null;\n        this.nzStringTemplateOutlet = null;\n    }\n    static ngTemplateContextGuard(_dir, _ctx) {\n        return true;\n    }\n    recreateView() {\n        this.viewContainer.clear();\n        const isTemplateRef = this.nzStringTemplateOutlet instanceof TemplateRef;\n        const templateRef = (isTemplateRef ? this.nzStringTemplateOutlet : this.templateRef);\n        this.embeddedViewRef = this.viewContainer.createEmbeddedView(templateRef, isTemplateRef ? this.nzStringTemplateOutletContext : this.context);\n    }\n    updateContext() {\n        const isTemplateRef = this.nzStringTemplateOutlet instanceof TemplateRef;\n        const newCtx = isTemplateRef ? this.nzStringTemplateOutletContext : this.context;\n        const oldCtx = this.embeddedViewRef.context;\n        if (newCtx) {\n            for (const propName of Object.keys(newCtx)) {\n                oldCtx[propName] = newCtx[propName];\n            }\n        }\n    }\n    ngOnChanges(changes) {\n        const { nzStringTemplateOutletContext, nzStringTemplateOutlet } = changes;\n        const shouldRecreateView = () => {\n            let shouldOutletRecreate = false;\n            if (nzStringTemplateOutlet) {\n                if (nzStringTemplateOutlet.firstChange) {\n                    shouldOutletRecreate = true;\n                }\n                else {\n                    const isPreviousOutletTemplate = nzStringTemplateOutlet.previousValue instanceof TemplateRef;\n                    const isCurrentOutletTemplate = nzStringTemplateOutlet.currentValue instanceof TemplateRef;\n                    shouldOutletRecreate = isPreviousOutletTemplate || isCurrentOutletTemplate;\n                }\n            }\n            const hasContextShapeChanged = (ctxChange) => {\n                const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n                const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n                if (prevCtxKeys.length === currCtxKeys.length) {\n                    for (const propName of currCtxKeys) {\n                        if (prevCtxKeys.indexOf(propName) === -1) {\n                            return true;\n                        }\n                    }\n                    return false;\n                }\n                else {\n                    return true;\n                }\n            };\n            const shouldContextRecreate = nzStringTemplateOutletContext && hasContextShapeChanged(nzStringTemplateOutletContext);\n            return shouldContextRecreate || shouldOutletRecreate;\n        };\n        if (nzStringTemplateOutlet) {\n            this.context.$implicit = nzStringTemplateOutlet.currentValue;\n        }\n        const recreateView = shouldRecreateView();\n        if (recreateView) {\n            /** recreate view when context shape or outlet change **/\n            this.recreateView();\n        }\n        else {\n            /** update context **/\n            this.updateContext();\n        }\n    }\n}\nNzStringTemplateOutletDirective.ɵfac = function NzStringTemplateOutletDirective_Factory(t) { return new (t || NzStringTemplateOutletDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nNzStringTemplateOutletDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NzStringTemplateOutletDirective, selectors: [[\"\", \"nzStringTemplateOutlet\", \"\"]], inputs: { nzStringTemplateOutletContext: \"nzStringTemplateOutletContext\", nzStringTemplateOutlet: \"nzStringTemplateOutlet\" }, exportAs: [\"nzStringTemplateOutlet\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nNzStringTemplateOutletDirective.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: TemplateRef }\n];\nNzStringTemplateOutletDirective.propDecorators = {\n    nzStringTemplateOutletContext: [{ type: Input }],\n    nzStringTemplateOutlet: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzStringTemplateOutletDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[nzStringTemplateOutlet]',\n                exportAs: 'nzStringTemplateOutlet'\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.TemplateRef }]; }, { nzStringTemplateOutletContext: [{\n            type: Input\n        }], nzStringTemplateOutlet: [{\n            type: Input\n        }] }); })();\nclass NzStringTemplateOutletContext {\n}\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzOutletModule {\n}\nNzOutletModule.ɵfac = function NzOutletModule_Factory(t) { return new (t || NzOutletModule)(); };\nNzOutletModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NzOutletModule });\nNzOutletModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzOutletModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule],\n                exports: [NzStringTemplateOutletDirective],\n                declarations: [NzStringTemplateOutletDirective]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NzOutletModule, { declarations: function () { return [NzStringTemplateOutletDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [NzStringTemplateOutletDirective]; } }); })();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzOutletModule, NzStringTemplateOutletDirective };\n\n//# sourceMappingURL=ng-zorro-antd-core-outlet.js.map"]},"metadata":{},"sourceType":"module"}