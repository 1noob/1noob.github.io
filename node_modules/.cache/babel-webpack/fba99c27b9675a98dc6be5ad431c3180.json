{"ast":null,"code":"import _construct from \"/Users/mac/WebstormProjects/github-page/node_modules/@babel/runtime/helpers/esm/construct\";\nimport _toConsumableArray from \"/Users/mac/WebstormProjects/github-page/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"/Users/mac/WebstormProjects/github-page/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _set from \"/Users/mac/WebstormProjects/github-page/node_modules/@babel/runtime/helpers/esm/set\";\nimport _get from \"/Users/mac/WebstormProjects/github-page/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/mac/WebstormProjects/github-page/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mac/WebstormProjects/github-page/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/mac/WebstormProjects/github-page/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/mac/WebstormProjects/github-page/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mac/WebstormProjects/github-page/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { CdkVirtualScrollViewport, ScrollingModule } from '@angular/cdk/scrolling';\nimport { CommonModule } from '@angular/common';\nimport { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, IterableDiffers, ChangeDetectorRef, Host, Optional, ElementRef, Renderer2, Directive, ViewContainerRef, Inject, ViewEncapsulation, ViewChild, NgModule } from '@angular/core';\nimport { NzNoAnimationDirective, NzNoAnimationModule } from 'ng-zorro-antd/core/no-animation';\nimport { __decorate, __metadata } from 'tslib';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport { Subject, animationFrameScheduler, asapScheduler, merge, BehaviorSubject } from 'rxjs';\nimport { takeUntil, auditTime, take, map } from 'rxjs/operators';\nimport { CdkTree, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodeOutlet, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTreeNodeOutletContext } from '@angular/cdk/tree';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { treeCollapseMotion } from 'ng-zorro-antd/core/animation';\nimport { warnDeprecation } from 'ng-zorro-antd/core/logger';\nimport { DataSource } from '@angular/cdk/collections';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'ng-zorro-antd/core/no-animation';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/common';\nimport * as ɵngcc4 from '@angular/cdk/scrolling';\n\nfunction NzTreeNodeComponent_nz_tree_node_indents_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"nz-tree-node-indents\", 2);\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"indents\", ctx_r0.indents);\n  }\n}\n\nfunction NzTreeNodeComponent_nz_tree_node_toggle_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"nz-tree-node-toggle\", 3);\n    ɵngcc0.ɵɵelement(1, \"span\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nvar _c0 = [[[\"nz-tree-node-toggle\"], [\"\", \"nz-tree-node-toggle\", \"\"]], [[\"nz-tree-node-checkbox\"]], [[\"nz-tree-node-option\"]], \"*\"];\nvar _c1 = [\"nz-tree-node-toggle, [nz-tree-node-toggle]\", \"nz-tree-node-checkbox\", \"nz-tree-node-option\", \"*\"];\n\nfunction NzTreeNodeIndentsComponent_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 1);\n  }\n\n  if (rf & 2) {\n    var isEnd_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵclassProp(\"ant-tree-indent-unit-end\", !isEnd_r1);\n  }\n}\n\nvar _c2 = [\"*\"];\n\nfunction NzTreeVirtualScrollViewComponent_ng_container_2_ng_template_1_Template(rf, ctx) {}\n\nfunction NzTreeVirtualScrollViewComponent_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, NzTreeVirtualScrollViewComponent_ng_container_2_ng_template_1_Template, 0, 0, \"ng-template\", 4);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var item_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"data\", item_r1);\n  }\n}\n\nvar NzTreeNodeCheckboxComponent = /*#__PURE__*/function () {\n  function NzTreeNodeCheckboxComponent() {\n    _classCallCheck(this, NzTreeNodeCheckboxComponent);\n\n    this.nzClick = new EventEmitter();\n  }\n\n  _createClass(NzTreeNodeCheckboxComponent, [{\n    key: \"onClick\",\n    value: function onClick(e) {\n      if (!this.nzDisabled) {\n        this.nzClick.emit(e);\n      }\n    }\n  }]);\n\n  return NzTreeNodeCheckboxComponent;\n}();\n\nNzTreeNodeCheckboxComponent.ɵfac = function NzTreeNodeCheckboxComponent_Factory(t) {\n  return new (t || NzTreeNodeCheckboxComponent)();\n};\n\nNzTreeNodeCheckboxComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: NzTreeNodeCheckboxComponent,\n  selectors: [[\"nz-tree-node-checkbox\", 3, \"builtin\", \"\"]],\n  hostAttrs: [1, \"ant-tree-checkbox\"],\n  hostVars: 6,\n  hostBindings: function NzTreeNodeCheckboxComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function NzTreeNodeCheckboxComponent_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"ant-tree-checkbox-checked\", ctx.nzChecked)(\"ant-tree-checkbox-indeterminate\", ctx.nzIndeterminate)(\"ant-tree-checkbox-disabled\", ctx.nzDisabled);\n    }\n  },\n  inputs: {\n    nzChecked: \"nzChecked\",\n    nzIndeterminate: \"nzIndeterminate\",\n    nzDisabled: \"nzDisabled\"\n  },\n  outputs: {\n    nzClick: \"nzClick\"\n  },\n  decls: 1,\n  vars: 0,\n  consts: [[1, \"ant-tree-checkbox-inner\"]],\n  template: function NzTreeNodeCheckboxComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelement(0, \"span\", 0);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\nNzTreeNodeCheckboxComponent.propDecorators = {\n  nzChecked: [{\n    type: Input\n  }],\n  nzIndeterminate: [{\n    type: Input\n  }],\n  nzDisabled: [{\n    type: Input\n  }],\n  nzClick: [{\n    type: Output\n  }]\n};\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Boolean)], NzTreeNodeCheckboxComponent.prototype, \"nzDisabled\", void 0);\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n// tslint:disable-next-line: component-class-suffix\n\n\nvar NzTreeView = /*#__PURE__*/function (_CdkTree) {\n  _inherits(NzTreeView, _CdkTree);\n\n  var _super = _createSuper(NzTreeView);\n\n  function NzTreeView(differs, changeDetectorRef, noAnimation, directionality) {\n    var _this;\n\n    _classCallCheck(this, NzTreeView);\n\n    _this = _super.call(this, differs, changeDetectorRef);\n    _this.differs = differs;\n    _this.changeDetectorRef = changeDetectorRef;\n    _this.noAnimation = noAnimation;\n    _this.directionality = directionality;\n    _this.destroy$ = new Subject();\n    _this.dir = 'ltr';\n    _this._dataSourceChanged = new Subject();\n    _this.nzDirectoryTree = false;\n    _this.nzBlockNode = false;\n    return _this;\n  }\n\n  _createClass(NzTreeView, [{\n    key: \"dataSource\",\n    get: function get() {\n      return _get(_getPrototypeOf(NzTreeView.prototype), \"dataSource\", this);\n    },\n    set: function set(dataSource) {\n      _set(_getPrototypeOf(NzTreeView.prototype), \"dataSource\", dataSource, this, true);\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this2 = this;\n\n      var _a;\n\n      _get(_getPrototypeOf(NzTreeView.prototype), \"ngOnInit\", this).call(this);\n\n      if (this.directionality) {\n        this.dir = this.directionality.value;\n        (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe(function (direction) {\n          _this2.dir = direction;\n\n          _this2.changeDetectorRef.detectChanges();\n        });\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      _get(_getPrototypeOf(NzTreeView.prototype), \"ngOnDestroy\", this).call(this);\n\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n  }, {\n    key: \"renderNodeChanges\",\n    value: function renderNodeChanges(data, dataDiffer, viewContainer, parentData) {\n      _get(_getPrototypeOf(NzTreeView.prototype), \"renderNodeChanges\", this).call(this, data, dataDiffer, viewContainer, parentData);\n\n      this._dataSourceChanged.next();\n    }\n  }]);\n\n  return NzTreeView;\n}(CdkTree);\n\nNzTreeView.ɵfac = function NzTreeView_Factory(t) {\n  return new (t || NzTreeView)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NzNoAnimationDirective, 9), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8));\n};\n\nNzTreeView.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: NzTreeView,\n  selectors: [[\"ng-component\"]],\n  inputs: {\n    nzDirectoryTree: \"nzDirectoryTree\",\n    nzBlockNode: \"nzBlockNode\",\n    dataSource: [\"nzDataSource\", \"dataSource\"],\n    treeControl: [\"nzTreeControl\", \"treeControl\"]\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 0,\n  vars: 0,\n  template: function NzTreeView_Template(rf, ctx) {},\n  encapsulation: 2\n});\n\nNzTreeView.ctorParameters = function () {\n  return [{\n    type: IterableDiffers\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: NzNoAnimationDirective,\n    decorators: [{\n      type: Host\n    }, {\n      type: Optional\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nNzTreeView.propDecorators = {\n  treeControl: [{\n    type: Input,\n    args: ['nzTreeControl']\n  }],\n  dataSource: [{\n    type: Input,\n    args: ['nzDataSource']\n  }],\n  nzDirectoryTree: [{\n    type: Input\n  }],\n  nzBlockNode: [{\n    type: Input\n  }]\n};\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzTreeView.prototype, \"nzDirectoryTree\", void 0);\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzTreeView.prototype, \"nzBlockNode\", void 0);\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzTreeNodeComponent = /*#__PURE__*/function (_CdkTreeNode) {\n  _inherits(NzTreeNodeComponent, _CdkTreeNode);\n\n  var _super2 = _createSuper(NzTreeNodeComponent);\n\n  function NzTreeNodeComponent(elementRef, tree, renderer, cdr) {\n    var _this3;\n\n    _classCallCheck(this, NzTreeNodeComponent);\n\n    _this3 = _super2.call(this, elementRef, tree);\n    _this3.elementRef = elementRef;\n    _this3.tree = tree;\n    _this3.renderer = renderer;\n    _this3.cdr = cdr;\n    _this3.indents = [];\n    _this3.disabled = false;\n    _this3.selected = false;\n    _this3.isLeaf = false;\n\n    _this3._elementRef.nativeElement.classList.add('ant-tree-treenode');\n\n    return _this3;\n  }\n\n  _createClass(NzTreeNodeComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.isLeaf = !this.tree.treeControl.isExpandable(this.data);\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this.disabled = true;\n      this.updateDisabledClass();\n    }\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      this.disabled = false;\n      this.updateDisabledClass();\n    }\n  }, {\n    key: \"select\",\n    value: function select() {\n      this.selected = true;\n      this.updateSelectedClass();\n    }\n  }, {\n    key: \"deselect\",\n    value: function deselect() {\n      this.selected = false;\n      this.updateSelectedClass();\n    }\n  }, {\n    key: \"setIndents\",\n    value: function setIndents(indents) {\n      this.indents = indents;\n      this.cdr.markForCheck();\n    }\n  }, {\n    key: \"updateSelectedClass\",\n    value: function updateSelectedClass() {\n      if (this.selected) {\n        this.renderer.addClass(this.elementRef.nativeElement, 'ant-tree-treenode-selected');\n      } else {\n        this.renderer.removeClass(this.elementRef.nativeElement, 'ant-tree-treenode-selected');\n      }\n    }\n  }, {\n    key: \"updateDisabledClass\",\n    value: function updateDisabledClass() {\n      if (this.disabled) {\n        this.renderer.addClass(this.elementRef.nativeElement, 'ant-tree-treenode-disabled');\n      } else {\n        this.renderer.removeClass(this.elementRef.nativeElement, 'ant-tree-treenode-disabled');\n      }\n    }\n  }]);\n\n  return NzTreeNodeComponent;\n}(CdkTreeNode);\n\nNzTreeNodeComponent.ɵfac = function NzTreeNodeComponent_Factory(t) {\n  return new (t || NzTreeNodeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(NzTreeView), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nNzTreeNodeComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: NzTreeNodeComponent,\n  selectors: [[\"nz-tree-node\", 3, \"builtin\", \"\"]],\n  hostVars: 4,\n  hostBindings: function NzTreeNodeComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"ant-tree-treenode-switcher-open\", ctx.isExpanded)(\"ant-tree-treenode-switcher-close\", !ctx.isExpanded);\n    }\n  },\n  exportAs: [\"nzTreeNode\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNode,\n    useExisting: NzTreeNodeComponent\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 6,\n  vars: 2,\n  consts: [[3, \"indents\", 4, \"ngIf\"], [\"class\", \"nz-tree-leaf-line-icon\", \"nzTreeNodeNoopToggle\", \"\", 4, \"ngIf\"], [3, \"indents\"], [\"nzTreeNodeNoopToggle\", \"\", 1, \"nz-tree-leaf-line-icon\"], [1, \"ant-tree-switcher-leaf-line\"]],\n  template: function NzTreeNodeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c0);\n      ɵngcc0.ɵɵtemplate(0, NzTreeNodeComponent_nz_tree_node_indents_0_Template, 1, 1, \"nz-tree-node-indents\", 0);\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵtemplate(2, NzTreeNodeComponent_nz_tree_node_toggle_2_Template, 2, 0, \"nz-tree-node-toggle\", 1);\n      ɵngcc0.ɵɵprojection(3, 1);\n      ɵngcc0.ɵɵprojection(4, 2);\n      ɵngcc0.ɵɵprojection(5, 3);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.indents.length);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.indents.length && ctx.isLeaf);\n    }\n  },\n  directives: function directives() {\n    return [ɵngcc3.NgIf, NzTreeNodeIndentsComponent, NzTreeNodeNoopToggleDirective];\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nNzTreeNodeComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: NzTreeView\n  }, {\n    type: Renderer2\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n\nvar NzTreeNodeDefDirective = /*#__PURE__*/function (_CdkTreeNodeDef) {\n  _inherits(NzTreeNodeDefDirective, _CdkTreeNodeDef);\n\n  var _super3 = _createSuper(NzTreeNodeDefDirective);\n\n  function NzTreeNodeDefDirective() {\n    _classCallCheck(this, NzTreeNodeDefDirective);\n\n    return _super3.apply(this, arguments);\n  }\n\n  return NzTreeNodeDefDirective;\n}(CdkTreeNodeDef);\n\nNzTreeNodeDefDirective.ɵfac = /*@__PURE__*/function () {\n  var ɵNzTreeNodeDefDirective_BaseFactory;\n  return function NzTreeNodeDefDirective_Factory(t) {\n    return (ɵNzTreeNodeDefDirective_BaseFactory || (ɵNzTreeNodeDefDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(NzTreeNodeDefDirective)))(t || NzTreeNodeDefDirective);\n  };\n}();\n\nNzTreeNodeDefDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: NzTreeNodeDefDirective,\n  selectors: [[\"\", \"nzTreeNodeDef\", \"\"]],\n  inputs: {\n    when: [\"nzTreeNodeDefWhen\", \"when\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeDef,\n    useExisting: NzTreeNodeDefDirective\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nNzTreeNodeDefDirective.propDecorators = {\n  when: [{\n    type: Input,\n    args: ['nzTreeNodeDefWhen']\n  }]\n};\n\nvar NzTreeVirtualScrollNodeOutletDirective = /*#__PURE__*/function () {\n  function NzTreeVirtualScrollNodeOutletDirective(_viewContainerRef) {\n    _classCallCheck(this, NzTreeVirtualScrollNodeOutletDirective);\n\n    this._viewContainerRef = _viewContainerRef;\n    this._viewRef = null;\n  }\n\n  _createClass(NzTreeVirtualScrollNodeOutletDirective, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var recreateView = this.shouldRecreateView(changes);\n\n      if (recreateView) {\n        var viewContainerRef = this._viewContainerRef;\n\n        if (this._viewRef) {\n          viewContainerRef.remove(viewContainerRef.indexOf(this._viewRef));\n        }\n\n        this._viewRef = this.data ? viewContainerRef.createEmbeddedView(this.data.nodeDef.template, this.data.context) : null;\n\n        if (CdkTreeNode.mostRecentTreeNode && this._viewRef) {\n          CdkTreeNode.mostRecentTreeNode.data = this.data.data;\n        }\n      } else if (this._viewRef && this.data.context) {\n        this.updateExistingContext(this.data.context);\n      }\n    }\n  }, {\n    key: \"shouldRecreateView\",\n    value: function shouldRecreateView(changes) {\n      var ctxChange = changes.data;\n      return !!changes.data || ctxChange && this.hasContextShapeChanged(ctxChange);\n    }\n  }, {\n    key: \"hasContextShapeChanged\",\n    value: function hasContextShapeChanged(ctxChange) {\n      var prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n      var currCtxKeys = Object.keys(ctxChange.currentValue || {});\n\n      if (prevCtxKeys.length === currCtxKeys.length) {\n        var _iterator = _createForOfIteratorHelper(currCtxKeys),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var propName = _step.value;\n\n            if (prevCtxKeys.indexOf(propName) === -1) {\n              return true;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"updateExistingContext\",\n    value: function updateExistingContext(ctx) {\n      for (var _i = 0, _Object$keys = Object.keys(ctx); _i < _Object$keys.length; _i++) {\n        var propName = _Object$keys[_i];\n        this._viewRef.context[propName] = this.data.context[propName];\n      }\n    }\n  }]);\n\n  return NzTreeVirtualScrollNodeOutletDirective;\n}();\n\nNzTreeVirtualScrollNodeOutletDirective.ɵfac = function NzTreeVirtualScrollNodeOutletDirective_Factory(t) {\n  return new (t || NzTreeVirtualScrollNodeOutletDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n};\n\nNzTreeVirtualScrollNodeOutletDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: NzTreeVirtualScrollNodeOutletDirective,\n  selectors: [[\"\", \"nzTreeVirtualScrollNodeOutlet\", \"\"]],\n  inputs: {\n    data: \"data\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nNzTreeVirtualScrollNodeOutletDirective.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }];\n};\n\nNzTreeVirtualScrollNodeOutletDirective.propDecorators = {\n  data: [{\n    type: Input\n  }]\n};\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nfunction getParent(nodes, node, getLevel) {\n  var index = nodes.indexOf(node);\n\n  if (index < 0) {\n    return null;\n  }\n\n  var level = getLevel(node);\n\n  for (index--; index >= 0; index--) {\n    var preLevel = getLevel(nodes[index]);\n\n    if (preLevel + 1 === level) {\n      return nodes[index];\n    }\n\n    if (preLevel + 1 < level) {\n      return null;\n    }\n  }\n\n  return null;\n}\n\nfunction getNextSibling(nodes, node, getLevel, _index) {\n  var index = typeof _index !== 'undefined' ? _index : nodes.indexOf(node);\n\n  if (index < 0) {\n    return null;\n  }\n\n  var level = getLevel(node);\n\n  for (index++; index < nodes.length; index++) {\n    var nextLevel = getLevel(nodes[index]);\n\n    if (nextLevel < level) {\n      return null;\n    }\n\n    if (nextLevel === level) {\n      return nodes[index];\n    }\n  }\n\n  return null;\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * [true, false, false, true] => 1001\n */\n\n\nfunction booleanArrayToString(arr) {\n  return arr.map(function (i) {\n    return i ? 1 : 0;\n  }).join('');\n}\n\nvar BUILD_INDENTS_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n\nvar NzTreeNodeIndentsComponent = function NzTreeNodeIndentsComponent() {\n  _classCallCheck(this, NzTreeNodeIndentsComponent);\n\n  this.indents = [];\n};\n\nNzTreeNodeIndentsComponent.ɵfac = function NzTreeNodeIndentsComponent_Factory(t) {\n  return new (t || NzTreeNodeIndentsComponent)();\n};\n\nNzTreeNodeIndentsComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: NzTreeNodeIndentsComponent,\n  selectors: [[\"nz-tree-node-indents\"]],\n  hostAttrs: [1, \"ant-tree-indent\"],\n  inputs: {\n    indents: \"indents\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[\"class\", \"ant-tree-indent-unit\", 3, \"ant-tree-indent-unit-end\", 4, \"ngFor\", \"ngForOf\"], [1, \"ant-tree-indent-unit\"]],\n  template: function NzTreeNodeIndentsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, NzTreeNodeIndentsComponent_span_0_Template, 1, 2, \"span\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.indents);\n    }\n  },\n  directives: [ɵngcc3.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\nNzTreeNodeIndentsComponent.propDecorators = {\n  indents: [{\n    type: Input\n  }]\n};\n\nvar NzTreeNodeIndentLineDirective = /*#__PURE__*/function () {\n  function NzTreeNodeIndentLineDirective(treeNode, tree) {\n    var _this4 = this;\n\n    _classCallCheck(this, NzTreeNodeIndentLineDirective);\n\n    this.treeNode = treeNode;\n    this.tree = tree;\n    this.isLast = 'unset';\n    this.isLeaf = false;\n    this.preNodeRef = null;\n    this.nextNodeRef = null;\n    this.currentIndents = '';\n    this.buildIndents();\n    this.checkLast();\n    /**\n     * The dependent data (TreeControl.dataNodes) can be set after node instantiation,\n     * and setting the indents can cause frame rate loss if it is set too often.\n     */\n\n    this.changeSubscription = merge(this.treeNode._dataChanges, tree._dataSourceChanged).pipe(auditTime(0, BUILD_INDENTS_SCHEDULER)).subscribe(function () {\n      _this4.buildIndents();\n\n      _this4.checkAdjacent();\n    });\n  }\n\n  _createClass(NzTreeNodeIndentLineDirective, [{\n    key: \"getIndents\",\n    value: function getIndents() {\n      var indents = [];\n      var nodes = this.tree.treeControl.dataNodes;\n      var getLevel = this.tree.treeControl.getLevel;\n      var parent = getParent(nodes, this.treeNode.data, getLevel);\n\n      while (parent) {\n        var parentNextSibling = getNextSibling(nodes, parent, getLevel);\n\n        if (parentNextSibling) {\n          indents.unshift(true);\n        } else {\n          indents.unshift(false);\n        }\n\n        parent = getParent(nodes, parent, getLevel);\n      }\n\n      return indents;\n    }\n  }, {\n    key: \"buildIndents\",\n    value: function buildIndents() {\n      if (this.treeNode.data) {\n        var indents = this.getIndents();\n        var diffString = booleanArrayToString(indents);\n\n        if (diffString !== this.currentIndents) {\n          this.treeNode.setIndents(this.getIndents());\n          this.currentIndents = diffString;\n        }\n      }\n    }\n    /**\n     * We need to add an class name for the last child node,\n     * this result can also be affected when the adjacent nodes are changed.\n     */\n\n  }, {\n    key: \"checkAdjacent\",\n    value: function checkAdjacent() {\n      var nodes = this.tree.treeControl.dataNodes;\n      var index = nodes.indexOf(this.treeNode.data);\n      var preNode = nodes[index - 1] || null;\n      var nextNode = nodes[index + 1] || null;\n\n      if (this.nextNodeRef !== nextNode || this.preNodeRef !== preNode) {\n        this.checkLast(index);\n      }\n\n      this.preNodeRef = preNode;\n      this.nextNodeRef = nextNode;\n    }\n  }, {\n    key: \"checkLast\",\n    value: function checkLast(index) {\n      var nodes = this.tree.treeControl.dataNodes;\n      this.isLeaf = this.treeNode.isLeaf;\n      this.isLast = !getNextSibling(nodes, this.treeNode.data, this.tree.treeControl.getLevel, index);\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.preNodeRef = null;\n      this.nextNodeRef = null;\n      this.changeSubscription.unsubscribe();\n    }\n  }]);\n\n  return NzTreeNodeIndentLineDirective;\n}();\n\nNzTreeNodeIndentLineDirective.ɵfac = function NzTreeNodeIndentLineDirective_Factory(t) {\n  return new (t || NzTreeNodeIndentLineDirective)(ɵngcc0.ɵɵdirectiveInject(NzTreeNodeComponent), ɵngcc0.ɵɵdirectiveInject(NzTreeView));\n};\n\nNzTreeNodeIndentLineDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: NzTreeNodeIndentLineDirective,\n  selectors: [[\"nz-tree-node\", \"nzTreeNodeIndentLine\", \"\"]],\n  hostAttrs: [1, \"ant-tree-show-line\"],\n  hostVars: 2,\n  hostBindings: function NzTreeNodeIndentLineDirective_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"ant-tree-treenode-leaf-last\", ctx.isLast && ctx.isLeaf);\n    }\n  }\n});\n\nNzTreeNodeIndentLineDirective.ctorParameters = function () {\n  return [{\n    type: NzTreeNodeComponent\n  }, {\n    type: NzTreeView\n  }];\n};\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzTreeNodeOptionComponent = /*#__PURE__*/function () {\n  function NzTreeNodeOptionComponent(treeNode) {\n    _classCallCheck(this, NzTreeNodeOptionComponent);\n\n    this.treeNode = treeNode;\n    this.nzSelected = false;\n    this.nzDisabled = false;\n    this.nzClick = new EventEmitter();\n  }\n\n  _createClass(NzTreeNodeOptionComponent, [{\n    key: \"isExpanded\",\n    get: function get() {\n      return this.treeNode.isExpanded;\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(e) {\n      if (!this.nzDisabled) {\n        this.nzClick.emit(e);\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var nzDisabled = changes.nzDisabled,\n          nzSelected = changes.nzSelected;\n\n      if (nzDisabled) {\n        if (nzDisabled.currentValue) {\n          this.treeNode.disable();\n        } else {\n          this.treeNode.enable();\n        }\n      }\n\n      if (nzSelected) {\n        if (nzSelected.currentValue) {\n          this.treeNode.select();\n        } else {\n          this.treeNode.deselect();\n        }\n      }\n    }\n  }]);\n\n  return NzTreeNodeOptionComponent;\n}();\n\nNzTreeNodeOptionComponent.ɵfac = function NzTreeNodeOptionComponent_Factory(t) {\n  return new (t || NzTreeNodeOptionComponent)(ɵngcc0.ɵɵdirectiveInject(NzTreeNodeComponent));\n};\n\nNzTreeNodeOptionComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: NzTreeNodeOptionComponent,\n  selectors: [[\"nz-tree-node-option\"]],\n  hostAttrs: [1, \"ant-tree-node-content-wrapper\"],\n  hostVars: 4,\n  hostBindings: function NzTreeNodeOptionComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function NzTreeNodeOptionComponent_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"ant-tree-node-content-wrapper-open\", ctx.isExpanded)(\"ant-tree-node-selected\", ctx.nzSelected);\n    }\n  },\n  inputs: {\n    nzSelected: \"nzSelected\",\n    nzDisabled: \"nzDisabled\"\n  },\n  outputs: {\n    nzClick: \"nzClick\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c2,\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"ant-tree-title\"]],\n  template: function NzTreeNodeOptionComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"span\", 0);\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nNzTreeNodeOptionComponent.ctorParameters = function () {\n  return [{\n    type: NzTreeNodeComponent\n  }];\n};\n\nNzTreeNodeOptionComponent.propDecorators = {\n  nzSelected: [{\n    type: Input\n  }],\n  nzDisabled: [{\n    type: Input\n  }],\n  nzClick: [{\n    type: Output\n  }]\n};\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzTreeNodeOptionComponent.prototype, \"nzSelected\", void 0);\n\n__decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzTreeNodeOptionComponent.prototype, \"nzDisabled\", void 0);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeNodeCheckboxComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-node-checkbox:not([builtin])',\n      template: \"\\n    <span class=\\\"ant-tree-checkbox-inner\\\"></span>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      preserveWhitespaces: false,\n      host: {\n        class: 'ant-tree-checkbox',\n        '[class.ant-tree-checkbox-checked]': \"nzChecked\",\n        '[class.ant-tree-checkbox-indeterminate]': \"nzIndeterminate\",\n        '[class.ant-tree-checkbox-disabled]': \"nzDisabled\",\n        '(click)': 'onClick($event)'\n      }\n    }]\n  }], function () {\n    return [];\n  }, {\n    nzClick: [{\n      type: Output\n    }],\n    nzChecked: [{\n      type: Input\n    }],\n    nzIndeterminate: [{\n      type: Input\n    }],\n    nzDisabled: [{\n      type: Input\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeView, [{\n    type: Component,\n    args: [{\n      template: ''\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc1.NzNoAnimationDirective,\n      decorators: [{\n        type: Host\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    nzDirectoryTree: [{\n      type: Input\n    }],\n    nzBlockNode: [{\n      type: Input\n    }],\n    dataSource: [{\n      type: Input,\n      args: ['nzDataSource']\n    }],\n    treeControl: [{\n      type: Input,\n      args: ['nzTreeControl']\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeNodeComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-node:not([builtin])',\n      exportAs: 'nzTreeNode',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [{\n        provide: CdkTreeNode,\n        useExisting: NzTreeNodeComponent\n      }],\n      template: \"\\n    <nz-tree-node-indents [indents]=\\\"indents\\\" *ngIf=\\\"indents.length\\\"></nz-tree-node-indents>\\n    <ng-content select=\\\"nz-tree-node-toggle, [nz-tree-node-toggle]\\\"></ng-content>\\n    <nz-tree-node-toggle class=\\\"nz-tree-leaf-line-icon\\\" *ngIf=\\\"indents.length && isLeaf\\\" nzTreeNodeNoopToggle>\\n      <span class=\\\"ant-tree-switcher-leaf-line\\\"></span>\\n    </nz-tree-node-toggle>\\n    <ng-content select=\\\"nz-tree-node-checkbox\\\"></ng-content>\\n    <ng-content select=\\\"nz-tree-node-option\\\"></ng-content>\\n    <ng-content></ng-content>\\n  \",\n      host: {\n        '[class.ant-tree-treenode-switcher-open]': 'isExpanded',\n        '[class.ant-tree-treenode-switcher-close]': '!isExpanded'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: NzTreeView\n    }, {\n      type: ɵngcc0.Renderer2\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, null);\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeNodeDefDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[nzTreeNodeDef]',\n      providers: [{\n        provide: CdkTreeNodeDef,\n        useExisting: NzTreeNodeDefDirective\n      }]\n    }]\n  }], null, {\n    when: [{\n      type: Input,\n      args: ['nzTreeNodeDefWhen']\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeVirtualScrollNodeOutletDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[nzTreeVirtualScrollNodeOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }];\n  }, {\n    data: [{\n      type: Input\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeNodeIndentsComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-node-indents',\n      template: \"\\n    <span class=\\\"ant-tree-indent-unit\\\" [class.ant-tree-indent-unit-end]=\\\"!isEnd\\\" *ngFor=\\\"let isEnd of indents\\\"></span>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        class: 'ant-tree-indent'\n      }\n    }]\n  }], function () {\n    return [];\n  }, {\n    indents: [{\n      type: Input\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeNodeIndentLineDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'nz-tree-node[nzTreeNodeIndentLine]',\n      host: {\n        class: 'ant-tree-show-line',\n        '[class.ant-tree-treenode-leaf-last]': 'isLast && isLeaf'\n      }\n    }]\n  }], function () {\n    return [{\n      type: NzTreeNodeComponent\n    }, {\n      type: NzTreeView\n    }];\n  }, null);\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeNodeOptionComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-node-option',\n      template: \"\\n    <span class=\\\"ant-tree-title\\\"><ng-content></ng-content></span>\\n  \",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        class: 'ant-tree-node-content-wrapper',\n        '[class.ant-tree-node-content-wrapper-open]': 'isExpanded',\n        '[class.ant-tree-node-selected]': 'nzSelected',\n        '(click)': 'onClick($event)'\n      }\n    }]\n  }], function () {\n    return [{\n      type: NzTreeNodeComponent\n    }];\n  }, {\n    nzSelected: [{\n      type: Input\n    }],\n    nzDisabled: [{\n      type: Input\n    }],\n    nzClick: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzTreeNodeOutletDirective = function NzTreeNodeOutletDirective(viewContainer, _node) {\n  _classCallCheck(this, NzTreeNodeOutletDirective);\n\n  this.viewContainer = viewContainer;\n  this._node = _node;\n};\n\nNzTreeNodeOutletDirective.ɵfac = function NzTreeNodeOutletDirective_Factory(t) {\n  return new (t || NzTreeNodeOutletDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8));\n};\n\nNzTreeNodeOutletDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: NzTreeNodeOutletDirective,\n  selectors: [[\"\", \"nzTreeNodeOutlet\", \"\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeOutlet,\n    useExisting: NzTreeNodeOutletDirective\n  }])]\n});\n\nNzTreeNodeOutletDirective.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [CDK_TREE_NODE_OUTLET_NODE]\n    }, {\n      type: Optional\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeNodeOutletDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[nzTreeNodeOutlet]',\n      providers: [{\n        provide: CdkTreeNodeOutlet,\n        useExisting: NzTreeNodeOutletDirective\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TREE_NODE_OUTLET_NODE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzTreeNodePaddingDirective = /*#__PURE__*/function (_CdkTreeNodePadding) {\n  _inherits(NzTreeNodePaddingDirective, _CdkTreeNodePadding);\n\n  var _super4 = _createSuper(NzTreeNodePaddingDirective);\n\n  function NzTreeNodePaddingDirective() {\n    var _this5;\n\n    _classCallCheck(this, NzTreeNodePaddingDirective);\n\n    _this5 = _super4.apply(this, arguments);\n    _this5._indent = 24;\n    return _this5;\n  }\n\n  _createClass(NzTreeNodePaddingDirective, [{\n    key: \"level\",\n    get: function get() {\n      return this._level;\n    },\n    set: function set(value) {\n      this._setLevelInput(value);\n    }\n  }, {\n    key: \"indent\",\n    get: function get() {\n      return this._indent;\n    },\n    set: function set(indent) {\n      this._setIndentInput(indent);\n    }\n  }]);\n\n  return NzTreeNodePaddingDirective;\n}(CdkTreeNodePadding);\n\nNzTreeNodePaddingDirective.ɵfac = /*@__PURE__*/function () {\n  var ɵNzTreeNodePaddingDirective_BaseFactory;\n  return function NzTreeNodePaddingDirective_Factory(t) {\n    return (ɵNzTreeNodePaddingDirective_BaseFactory || (ɵNzTreeNodePaddingDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(NzTreeNodePaddingDirective)))(t || NzTreeNodePaddingDirective);\n  };\n}();\n\nNzTreeNodePaddingDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: NzTreeNodePaddingDirective,\n  selectors: [[\"\", \"nzTreeNodePadding\", \"\"]],\n  inputs: {\n    level: [\"nzTreeNodePadding\", \"level\"],\n    indent: [\"nzTreeNodePaddingIndent\", \"indent\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodePadding,\n    useExisting: NzTreeNodePaddingDirective\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nNzTreeNodePaddingDirective.propDecorators = {\n  level: [{\n    type: Input,\n    args: ['nzTreeNodePadding']\n  }],\n  indent: [{\n    type: Input,\n    args: ['nzTreeNodePaddingIndent']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeNodePaddingDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[nzTreeNodePadding]',\n      providers: [{\n        provide: CdkTreeNodePadding,\n        useExisting: NzTreeNodePaddingDirective\n      }]\n    }]\n  }], null, {\n    level: [{\n      type: Input,\n      args: ['nzTreeNodePadding']\n    }],\n    indent: [{\n      type: Input,\n      args: ['nzTreeNodePaddingIndent']\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzTreeNodeNoopToggleDirective = function NzTreeNodeNoopToggleDirective() {\n  _classCallCheck(this, NzTreeNodeNoopToggleDirective);\n};\n\nNzTreeNodeNoopToggleDirective.ɵfac = function NzTreeNodeNoopToggleDirective_Factory(t) {\n  return new (t || NzTreeNodeNoopToggleDirective)();\n};\n\nNzTreeNodeNoopToggleDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: NzTreeNodeNoopToggleDirective,\n  selectors: [[\"nz-tree-node-toggle\", \"nzTreeNodeNoopToggle\", \"\"], [\"\", \"nzTreeNodeNoopToggle\", \"\"]],\n  hostAttrs: [1, \"ant-tree-switcher\", \"ant-tree-switcher-noop\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeNodeNoopToggleDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'nz-tree-node-toggle[nzTreeNodeNoopToggle], [nzTreeNodeNoopToggle]',\n      host: {\n        class: 'ant-tree-switcher ant-tree-switcher-noop'\n      }\n    }]\n  }], null, null);\n})();\n\nvar NzTreeNodeToggleDirective = /*#__PURE__*/function (_CdkTreeNodeToggle) {\n  _inherits(NzTreeNodeToggleDirective, _CdkTreeNodeToggle);\n\n  var _super5 = _createSuper(NzTreeNodeToggleDirective);\n\n  function NzTreeNodeToggleDirective() {\n    _classCallCheck(this, NzTreeNodeToggleDirective);\n\n    return _super5.apply(this, arguments);\n  }\n\n  _createClass(NzTreeNodeToggleDirective, [{\n    key: \"recursive\",\n    get: function get() {\n      return this._recursive;\n    },\n    set: function set(value) {\n      this._recursive = coerceBooleanProperty(value);\n    }\n  }, {\n    key: \"isExpanded\",\n    get: function get() {\n      return this._treeNode.isExpanded;\n    }\n  }]);\n\n  return NzTreeNodeToggleDirective;\n}(CdkTreeNodeToggle);\n\nNzTreeNodeToggleDirective.ɵfac = /*@__PURE__*/function () {\n  var ɵNzTreeNodeToggleDirective_BaseFactory;\n  return function NzTreeNodeToggleDirective_Factory(t) {\n    return (ɵNzTreeNodeToggleDirective_BaseFactory || (ɵNzTreeNodeToggleDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(NzTreeNodeToggleDirective)))(t || NzTreeNodeToggleDirective);\n  };\n}();\n\nNzTreeNodeToggleDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: NzTreeNodeToggleDirective,\n  selectors: [[\"nz-tree-node-toggle\", 3, \"nzTreeNodeNoopToggle\", \"\"], [\"\", \"nzTreeNodeToggle\", \"\"]],\n  hostAttrs: [1, \"ant-tree-switcher\"],\n  hostVars: 4,\n  hostBindings: function NzTreeNodeToggleDirective_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"ant-tree-switcher_open\", ctx.isExpanded)(\"ant-tree-switcher_close\", !ctx.isExpanded);\n    }\n  },\n  inputs: {\n    recursive: [\"nzTreeNodeToggleRecursive\", \"recursive\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeToggle,\n    useExisting: NzTreeNodeToggleDirective\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nNzTreeNodeToggleDirective.propDecorators = {\n  recursive: [{\n    type: Input,\n    args: ['nzTreeNodeToggleRecursive']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeNodeToggleDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'nz-tree-node-toggle:not([nzTreeNodeNoopToggle]), [nzTreeNodeToggle]',\n      providers: [{\n        provide: CdkTreeNodeToggle,\n        useExisting: NzTreeNodeToggleDirective\n      }],\n      host: {\n        class: 'ant-tree-switcher',\n        '[class.ant-tree-switcher_open]': 'isExpanded',\n        '[class.ant-tree-switcher_close]': '!isExpanded'\n      }\n    }]\n  }], null, {\n    recursive: [{\n      type: Input,\n      args: ['nzTreeNodeToggleRecursive']\n    }]\n  });\n})();\n\nvar NzTreeNodeToggleRotateIconDirective = function NzTreeNodeToggleRotateIconDirective() {\n  _classCallCheck(this, NzTreeNodeToggleRotateIconDirective);\n};\n\nNzTreeNodeToggleRotateIconDirective.ɵfac = function NzTreeNodeToggleRotateIconDirective_Factory(t) {\n  return new (t || NzTreeNodeToggleRotateIconDirective)();\n};\n\nNzTreeNodeToggleRotateIconDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: NzTreeNodeToggleRotateIconDirective,\n  selectors: [[\"\", \"nz-icon\", \"\", \"nzTreeNodeToggleRotateIcon\", \"\"]],\n  hostAttrs: [1, \"ant-tree-switcher-icon\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeNodeToggleRotateIconDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[nz-icon][nzTreeNodeToggleRotateIcon]',\n      host: {\n        class: 'ant-tree-switcher-icon'\n      }\n    }]\n  }], null, null);\n})();\n\nvar NzTreeNodeToggleActiveIconDirective = function NzTreeNodeToggleActiveIconDirective() {\n  _classCallCheck(this, NzTreeNodeToggleActiveIconDirective);\n};\n\nNzTreeNodeToggleActiveIconDirective.ɵfac = function NzTreeNodeToggleActiveIconDirective_Factory(t) {\n  return new (t || NzTreeNodeToggleActiveIconDirective)();\n};\n\nNzTreeNodeToggleActiveIconDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: NzTreeNodeToggleActiveIconDirective,\n  selectors: [[\"\", \"nz-icon\", \"\", \"nzTreeNodeToggleActiveIcon\", \"\"]],\n  hostAttrs: [1, \"ant-tree-switcher-loading-icon\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeNodeToggleActiveIconDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[nz-icon][nzTreeNodeToggleActiveIcon]',\n      host: {\n        class: 'ant-tree-switcher-loading-icon'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzTreeViewComponent = /*#__PURE__*/function (_NzTreeView) {\n  _inherits(NzTreeViewComponent, _NzTreeView);\n\n  var _super6 = _createSuper(NzTreeViewComponent);\n\n  function NzTreeViewComponent() {\n    var _this6;\n\n    _classCallCheck(this, NzTreeViewComponent);\n\n    _this6 = _super6.apply(this, arguments);\n    _this6._afterViewInit = false;\n    return _this6;\n  }\n\n  _createClass(NzTreeViewComponent, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this7 = this;\n\n      Promise.resolve().then(function () {\n        _this7._afterViewInit = true;\n\n        _this7.changeDetectorRef.markForCheck();\n      });\n    }\n  }]);\n\n  return NzTreeViewComponent;\n}(NzTreeView);\n\nNzTreeViewComponent.ɵfac = /*@__PURE__*/function () {\n  var ɵNzTreeViewComponent_BaseFactory;\n  return function NzTreeViewComponent_Factory(t) {\n    return (ɵNzTreeViewComponent_BaseFactory || (ɵNzTreeViewComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(NzTreeViewComponent)))(t || NzTreeViewComponent);\n  };\n}();\n\nNzTreeViewComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: NzTreeViewComponent,\n  selectors: [[\"nz-tree-view\"]],\n  viewQuery: function NzTreeViewComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(NzTreeNodeOutletDirective, 7);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t.first);\n    }\n  },\n  hostAttrs: [1, \"ant-tree\"],\n  hostVars: 6,\n  hostBindings: function NzTreeViewComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"ant-tree-block-node\", ctx.nzDirectoryTree || ctx.nzBlockNode)(\"ant-tree-directory\", ctx.nzDirectoryTree)(\"ant-tree-rtl\", ctx.dir === \"rtl\");\n    }\n  },\n  exportAs: [\"nzTreeView\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTree,\n    useExisting: NzTreeViewComponent\n  }, {\n    provide: NzTreeView,\n    useExisting: NzTreeViewComponent\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 2,\n  consts: [[1, \"ant-tree-list-holder\"], [1, \"ant-tree-list-holder-inner\"], [\"nzTreeNodeOutlet\", \"\"]],\n  template: function NzTreeViewComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n      ɵngcc0.ɵɵelementContainer(2, 2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"@.disabled\", !ctx._afterViewInit || (ctx.noAnimation == null ? null : ctx.noAnimation.nzNoAnimation))(\"@treeCollapseMotion\", ctx._nodeOutlet.viewContainer.length);\n    }\n  },\n  directives: [NzTreeNodeOutletDirective],\n  encapsulation: 2,\n  data: {\n    animation: [treeCollapseMotion]\n  },\n  changeDetection: 0\n});\nNzTreeViewComponent.propDecorators = {\n  nodeOutlet: [{\n    type: ViewChild,\n    args: [NzTreeNodeOutletDirective, {\n      static: true\n    }]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeViewComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-view',\n      exportAs: 'nzTreeView',\n      template: \"\\n    <div class=\\\"ant-tree-list-holder\\\">\\n      <div\\n        [@.disabled]=\\\"!_afterViewInit || noAnimation?.nzNoAnimation\\\"\\n        [@treeCollapseMotion]=\\\"_nodeOutlet.viewContainer.length\\\"\\n        class=\\\"ant-tree-list-holder-inner\\\"\\n      >\\n        <ng-container nzTreeNodeOutlet></ng-container>\\n      </div>\\n    </div>\\n  \",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [{\n        provide: CdkTree,\n        useExisting: NzTreeViewComponent\n      }, {\n        provide: NzTreeView,\n        useExisting: NzTreeViewComponent\n      }],\n      host: {\n        class: 'ant-tree',\n        '[class.ant-tree-block-node]': 'nzDirectoryTree || nzBlockNode',\n        '[class.ant-tree-directory]': 'nzDirectoryTree',\n        '[class.ant-tree-rtl]': \"dir === 'rtl'\"\n      },\n      animations: [treeCollapseMotion]\n    }]\n  }], null, {\n    nodeOutlet: [{\n      type: ViewChild,\n      args: [NzTreeNodeOutletDirective, {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar DEFAULT_SIZE = 28;\n\nvar NzTreeVirtualScrollViewComponent = /*#__PURE__*/function (_NzTreeView2) {\n  _inherits(NzTreeVirtualScrollViewComponent, _NzTreeView2);\n\n  var _super7 = _createSuper(NzTreeVirtualScrollViewComponent);\n\n  function NzTreeVirtualScrollViewComponent() {\n    var _this8;\n\n    _classCallCheck(this, NzTreeVirtualScrollViewComponent);\n\n    _this8 = _super7.apply(this, arguments);\n    _this8.itemSize = DEFAULT_SIZE;\n    /**\n     * @deprecated use `nzItemSize` instead\n     * @breaking-change 12.0.0\n     */\n\n    _this8.nzNodeWidth = DEFAULT_SIZE;\n    _this8.nzItemSize = DEFAULT_SIZE;\n    _this8.nzMinBufferPx = DEFAULT_SIZE * 5;\n    _this8.nzMaxBufferPx = DEFAULT_SIZE * 10;\n    _this8.nodes = [];\n    return _this8;\n  }\n\n  _createClass(NzTreeVirtualScrollViewComponent, [{\n    key: \"renderNodeChanges\",\n    value: function renderNodeChanges(data) {\n      var _this9 = this;\n\n      this.nodes = _construct(Array, _toConsumableArray(data)).map(function (n, i) {\n        return _this9.createNode(n, i);\n      });\n    }\n  }, {\n    key: \"createNode\",\n    value: function createNode(nodeData, index) {\n      var node = this._getNodeDef(nodeData, index);\n\n      var context = new CdkTreeNodeOutletContext(nodeData);\n\n      if (this.treeControl.getLevel) {\n        context.level = this.treeControl.getLevel(nodeData);\n      } else {\n        context.level = 0;\n      }\n\n      return {\n        data: nodeData,\n        context: context,\n        nodeDef: node\n      };\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var nzNodeWidth = changes.nzNodeWidth,\n          nzItemSize = changes.nzItemSize;\n\n      if (nzNodeWidth) {\n        warnDeprecation('`nzNodeWidth` in nz-tree-virtual-scroll-view will be removed in 12.0.0, please use `nzItemSize` instead.');\n        this.itemSize = nzNodeWidth.currentValue;\n      }\n\n      if (nzItemSize) {\n        this.itemSize = nzItemSize.currentValue;\n      }\n    }\n  }]);\n\n  return NzTreeVirtualScrollViewComponent;\n}(NzTreeView);\n\nNzTreeVirtualScrollViewComponent.ɵfac = /*@__PURE__*/function () {\n  var ɵNzTreeVirtualScrollViewComponent_BaseFactory;\n  return function NzTreeVirtualScrollViewComponent_Factory(t) {\n    return (ɵNzTreeVirtualScrollViewComponent_BaseFactory || (ɵNzTreeVirtualScrollViewComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(NzTreeVirtualScrollViewComponent)))(t || NzTreeVirtualScrollViewComponent);\n  };\n}();\n\nNzTreeVirtualScrollViewComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: NzTreeVirtualScrollViewComponent,\n  selectors: [[\"nz-tree-virtual-scroll-view\"]],\n  viewQuery: function NzTreeVirtualScrollViewComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(NzTreeNodeOutletDirective, 7);\n      ɵngcc0.ɵɵviewQuery(CdkVirtualScrollViewport, 7);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.virtualScrollViewport = _t.first);\n    }\n  },\n  hostAttrs: [1, \"ant-tree\"],\n  hostVars: 6,\n  hostBindings: function NzTreeVirtualScrollViewComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"ant-tree-block-node\", ctx.nzDirectoryTree || ctx.nzBlockNode)(\"ant-tree-directory\", ctx.nzDirectoryTree)(\"ant-tree-rtl\", ctx.dir === \"rtl\");\n    }\n  },\n  inputs: {\n    nzNodeWidth: \"nzNodeWidth\",\n    nzItemSize: \"nzItemSize\",\n    nzMinBufferPx: \"nzMinBufferPx\",\n    nzMaxBufferPx: \"nzMaxBufferPx\"\n  },\n  exportAs: [\"nzTreeVirtualScrollView\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: NzTreeView,\n    useExisting: NzTreeVirtualScrollViewComponent\n  }, {\n    provide: CdkTree,\n    useExisting: NzTreeVirtualScrollViewComponent\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 4,\n  vars: 4,\n  consts: [[1, \"ant-tree-list\"], [1, \"ant-tree-list-holder\", 3, \"itemSize\", \"minBufferPx\", \"maxBufferPx\"], [4, \"cdkVirtualFor\", \"cdkVirtualForOf\"], [\"nzTreeNodeOutlet\", \"\"], [\"nzTreeVirtualScrollNodeOutlet\", \"\", 3, \"data\"]],\n  template: function NzTreeVirtualScrollViewComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"cdk-virtual-scroll-viewport\", 1);\n      ɵngcc0.ɵɵtemplate(2, NzTreeVirtualScrollViewComponent_ng_container_2_Template, 2, 1, \"ng-container\", 2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementContainer(3, 3);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"itemSize\", ctx.itemSize)(\"minBufferPx\", ctx.nzMinBufferPx)(\"maxBufferPx\", ctx.nzMaxBufferPx);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"cdkVirtualForOf\", ctx.nodes);\n    }\n  },\n  directives: [ɵngcc4.CdkVirtualScrollViewport, ɵngcc4.CdkFixedSizeVirtualScroll, ɵngcc4.CdkVirtualForOf, NzTreeNodeOutletDirective, NzTreeVirtualScrollNodeOutletDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\nNzTreeVirtualScrollViewComponent.propDecorators = {\n  nodeOutlet: [{\n    type: ViewChild,\n    args: [NzTreeNodeOutletDirective, {\n      static: true\n    }]\n  }],\n  virtualScrollViewport: [{\n    type: ViewChild,\n    args: [CdkVirtualScrollViewport, {\n      static: true\n    }]\n  }],\n  nzNodeWidth: [{\n    type: Input\n  }],\n  nzItemSize: [{\n    type: Input\n  }],\n  nzMinBufferPx: [{\n    type: Input\n  }],\n  nzMaxBufferPx: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeVirtualScrollViewComponent, [{\n    type: Component,\n    args: [{\n      selector: 'nz-tree-virtual-scroll-view',\n      exportAs: 'nzTreeVirtualScrollView',\n      template: \"\\n    <div class=\\\"ant-tree-list\\\">\\n      <cdk-virtual-scroll-viewport\\n        class=\\\"ant-tree-list-holder\\\"\\n        [itemSize]=\\\"itemSize\\\"\\n        [minBufferPx]=\\\"nzMinBufferPx\\\"\\n        [maxBufferPx]=\\\"nzMaxBufferPx\\\"\\n      >\\n        <ng-container *cdkVirtualFor=\\\"let item of nodes; let i = index\\\">\\n          <ng-template nzTreeVirtualScrollNodeOutlet [data]=\\\"item\\\"></ng-template>\\n        </ng-container>\\n      </cdk-virtual-scroll-viewport>\\n    </div>\\n    <ng-container nzTreeNodeOutlet></ng-container>\\n  \",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [{\n        provide: NzTreeView,\n        useExisting: NzTreeVirtualScrollViewComponent\n      }, {\n        provide: CdkTree,\n        useExisting: NzTreeVirtualScrollViewComponent\n      }],\n      host: {\n        class: 'ant-tree',\n        '[class.ant-tree-block-node]': 'nzDirectoryTree || nzBlockNode',\n        '[class.ant-tree-directory]': 'nzDirectoryTree',\n        '[class.ant-tree-rtl]': \"dir === 'rtl'\"\n      }\n    }]\n  }], null, {\n    nzNodeWidth: [{\n      type: Input\n    }],\n    nzItemSize: [{\n      type: Input\n    }],\n    nzMinBufferPx: [{\n      type: Input\n    }],\n    nzMaxBufferPx: [{\n      type: Input\n    }],\n    nodeOutlet: [{\n      type: ViewChild,\n      args: [NzTreeNodeOutletDirective, {\n        static: true\n      }]\n    }],\n    virtualScrollViewport: [{\n      type: ViewChild,\n      args: [CdkVirtualScrollViewport, {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar treeWithControlComponents = [NzTreeView, NzTreeNodeOutletDirective, NzTreeViewComponent, NzTreeNodeDefDirective, NzTreeNodeComponent, NzTreeNodeToggleDirective, NzTreeNodePaddingDirective, NzTreeNodeToggleRotateIconDirective, NzTreeNodeToggleActiveIconDirective, NzTreeNodeOptionComponent, NzTreeNodeNoopToggleDirective, NzTreeNodeCheckboxComponent, NzTreeNodeIndentsComponent, NzTreeVirtualScrollViewComponent, NzTreeVirtualScrollNodeOutletDirective, NzTreeNodeIndentLineDirective];\n\nvar NzTreeViewModule = function NzTreeViewModule() {\n  _classCallCheck(this, NzTreeViewModule);\n};\n\nNzTreeViewModule.ɵfac = function NzTreeViewModule_Factory(t) {\n  return new (t || NzTreeViewModule)();\n};\n\nNzTreeViewModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: NzTreeViewModule\n});\nNzTreeViewModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [[BidiModule, CommonModule, NzNoAnimationModule, ScrollingModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeViewModule, [{\n    type: NgModule,\n    args: [{\n      imports: [BidiModule, CommonModule, NzNoAnimationModule, ScrollingModule],\n      declarations: [treeWithControlComponents],\n      exports: [treeWithControlComponents]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NzTreeViewModule, {\n    declarations: function declarations() {\n      return [NzTreeView, NzTreeNodeOutletDirective, NzTreeViewComponent, NzTreeNodeDefDirective, NzTreeNodeComponent, NzTreeNodeToggleDirective, NzTreeNodePaddingDirective, NzTreeNodeToggleRotateIconDirective, NzTreeNodeToggleActiveIconDirective, NzTreeNodeOptionComponent, NzTreeNodeNoopToggleDirective, NzTreeNodeCheckboxComponent, NzTreeNodeIndentsComponent, NzTreeVirtualScrollViewComponent, NzTreeVirtualScrollNodeOutletDirective, NzTreeNodeIndentLineDirective];\n    },\n    imports: function imports() {\n      return [BidiModule, CommonModule, NzNoAnimationModule, ScrollingModule];\n    },\n    exports: function exports() {\n      return [NzTreeView, NzTreeNodeOutletDirective, NzTreeViewComponent, NzTreeNodeDefDirective, NzTreeNodeComponent, NzTreeNodeToggleDirective, NzTreeNodePaddingDirective, NzTreeNodeToggleRotateIconDirective, NzTreeNodeToggleActiveIconDirective, NzTreeNodeOptionComponent, NzTreeNodeNoopToggleDirective, NzTreeNodeCheckboxComponent, NzTreeNodeIndentsComponent, NzTreeVirtualScrollViewComponent, NzTreeVirtualScrollNodeOutletDirective, NzTreeNodeIndentLineDirective];\n    }\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzTreeFlattener = /*#__PURE__*/function () {\n  function NzTreeFlattener(transformFunction, getLevel, isExpandable, getChildren) {\n    _classCallCheck(this, NzTreeFlattener);\n\n    this.transformFunction = transformFunction;\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n    this.getChildren = getChildren;\n  }\n\n  _createClass(NzTreeFlattener, [{\n    key: \"flattenNode\",\n    value: function flattenNode(node, level, resultNodes, parentMap) {\n      var _this10 = this;\n\n      var flatNode = this.transformFunction(node, level);\n      resultNodes.push(flatNode);\n\n      if (this.isExpandable(flatNode)) {\n        var childrenNodes = this.getChildren(node);\n\n        if (childrenNodes) {\n          if (Array.isArray(childrenNodes)) {\n            this.flattenChildren(childrenNodes, level, resultNodes, parentMap);\n          } else {\n            childrenNodes.pipe(take(1)).subscribe(function (children) {\n              _this10.flattenChildren(children, level, resultNodes, parentMap);\n            });\n          }\n        }\n      }\n\n      return resultNodes;\n    }\n  }, {\n    key: \"flattenChildren\",\n    value: function flattenChildren(children, level, resultNodes, parentMap) {\n      var _this11 = this;\n\n      children.forEach(function (child, index) {\n        var childParentMap = parentMap.slice();\n        childParentMap.push(index !== children.length - 1);\n\n        _this11.flattenNode(child, level + 1, resultNodes, childParentMap);\n      });\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n\n  }, {\n    key: \"flattenNodes\",\n    value: function flattenNodes(structuredData) {\n      var _this12 = this;\n\n      var resultNodes = [];\n      structuredData.forEach(function (node) {\n        return _this12.flattenNode(node, 0, resultNodes, []);\n      });\n      return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n\n  }, {\n    key: \"expandFlattenedNodes\",\n    value: function expandFlattenedNodes(nodes, treeControl) {\n      var _this13 = this;\n\n      var results = [];\n      var currentExpand = [];\n      currentExpand[0] = true;\n      nodes.forEach(function (node) {\n        var expand = true;\n\n        for (var i = 0; i <= _this13.getLevel(node); i++) {\n          expand = expand && currentExpand[i];\n        }\n\n        if (expand) {\n          results.push(node);\n        }\n\n        if (_this13.isExpandable(node)) {\n          currentExpand[_this13.getLevel(node) + 1] = treeControl.isExpanded(node);\n        }\n      });\n      return results;\n    }\n  }]);\n\n  return NzTreeFlattener;\n}();\n\nvar NzTreeFlatDataSource = /*#__PURE__*/function (_DataSource) {\n  _inherits(NzTreeFlatDataSource, _DataSource);\n\n  var _super8 = _createSuper(NzTreeFlatDataSource);\n\n  function NzTreeFlatDataSource(_treeControl, _treeFlattener) {\n    var _this14;\n\n    var initialData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n    _classCallCheck(this, NzTreeFlatDataSource);\n\n    _this14 = _super8.call(this);\n    _this14._treeControl = _treeControl;\n    _this14._treeFlattener = _treeFlattener;\n    _this14._flattenedData = new BehaviorSubject([]);\n    _this14._expandedData = new BehaviorSubject([]);\n    _this14._data = new BehaviorSubject(initialData);\n\n    _this14.flatNodes();\n\n    return _this14;\n  }\n\n  _createClass(NzTreeFlatDataSource, [{\n    key: \"setData\",\n    value: function setData(value) {\n      this._data.next(value);\n\n      this.flatNodes();\n    }\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      return this._data.getValue();\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(collectionViewer) {\n      var _this15 = this;\n\n      var changes = [collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData];\n      return merge.apply(void 0, changes).pipe(map(function () {\n        _this15._expandedData.next(_this15._treeFlattener.expandFlattenedNodes(_this15._flattenedData.value, _this15._treeControl));\n\n        return _this15._expandedData.value;\n      }));\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {// no op\n    }\n  }, {\n    key: \"flatNodes\",\n    value: function flatNodes() {\n      this._flattenedData.next(this._treeFlattener.flattenNodes(this.getData()));\n\n      this._treeControl.dataNodes = this._flattenedData.value;\n    }\n  }]);\n\n  return NzTreeFlatDataSource;\n}(DataSource);\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NzTreeFlatDataSource, NzTreeFlattener, NzTreeNodeCheckboxComponent, NzTreeNodeComponent, NzTreeNodeDefDirective, NzTreeNodeIndentLineDirective, NzTreeNodeIndentsComponent, NzTreeNodeNoopToggleDirective, NzTreeNodeOptionComponent, NzTreeNodeOutletDirective, NzTreeNodePaddingDirective, NzTreeNodeToggleActiveIconDirective, NzTreeNodeToggleDirective, NzTreeNodeToggleRotateIconDirective, NzTreeViewComponent, NzTreeViewModule, NzTreeVirtualScrollNodeOutletDirective, NzTreeVirtualScrollViewComponent, getNextSibling, getParent, NzTreeView as ɵa }; //# sourceMappingURL=ng-zorro-antd-tree-view.js.map","map":{"version":3,"sources":["/Users/mac/WebstormProjects/github-page/node_modules/ng-zorro-antd/__ivy_ngcc__/fesm2015/ng-zorro-antd-tree-view.js"],"names":["Directionality","BidiModule","CdkVirtualScrollViewport","ScrollingModule","CommonModule","EventEmitter","Component","ChangeDetectionStrategy","Input","Output","IterableDiffers","ChangeDetectorRef","Host","Optional","ElementRef","Renderer2","Directive","ViewContainerRef","Inject","ViewEncapsulation","ViewChild","NgModule","NzNoAnimationDirective","NzNoAnimationModule","__decorate","__metadata","InputBoolean","Subject","animationFrameScheduler","asapScheduler","merge","BehaviorSubject","takeUntil","auditTime","take","map","CdkTree","CdkTreeNode","CdkTreeNodeDef","CdkTreeNodeOutlet","CDK_TREE_NODE_OUTLET_NODE","CdkTreeNodePadding","CdkTreeNodeToggle","CdkTreeNodeOutletContext","coerceBooleanProperty","treeCollapseMotion","warnDeprecation","DataSource","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","NzTreeNodeComponent_nz_tree_node_indents_0_Template","rf","ctx","ɵɵelement","ctx_r0","ɵɵnextContext","ɵɵproperty","indents","NzTreeNodeComponent_nz_tree_node_toggle_2_Template","ɵɵelementStart","ɵɵelementEnd","_c0","_c1","NzTreeNodeIndentsComponent_span_0_Template","isEnd_r1","$implicit","ɵɵclassProp","_c2","NzTreeVirtualScrollViewComponent_ng_container_2_ng_template_1_Template","NzTreeVirtualScrollViewComponent_ng_container_2_Template","ɵɵelementContainerStart","ɵɵtemplate","ɵɵelementContainerEnd","item_r1","ɵɵadvance","NzTreeNodeCheckboxComponent","nzClick","e","nzDisabled","emit","ɵfac","NzTreeNodeCheckboxComponent_Factory","t","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","hostVars","hostBindings","NzTreeNodeCheckboxComponent_HostBindings","ɵɵlistener","NzTreeNodeCheckboxComponent_click_HostBindingHandler","$event","onClick","nzChecked","nzIndeterminate","inputs","outputs","decls","vars","consts","template","NzTreeNodeCheckboxComponent_Template","encapsulation","changeDetection","propDecorators","Boolean","prototype","NzTreeView","differs","changeDetectorRef","noAnimation","directionality","destroy$","dir","_dataSourceChanged","nzDirectoryTree","nzBlockNode","dataSource","_a","value","change","pipe","subscribe","direction","detectChanges","next","complete","data","dataDiffer","viewContainer","parentData","NzTreeView_Factory","ɵɵdirectiveInject","treeControl","features","ɵɵInheritDefinitionFeature","NzTreeView_Template","ctorParameters","decorators","args","Object","NzTreeNodeComponent","elementRef","tree","renderer","cdr","disabled","selected","isLeaf","_elementRef","nativeElement","classList","add","isExpandable","updateDisabledClass","updateSelectedClass","markForCheck","addClass","removeClass","NzTreeNodeComponent_Factory","NzTreeNodeComponent_HostBindings","isExpanded","exportAs","ɵɵProvidersFeature","provide","useExisting","ngContentSelectors","NzTreeNodeComponent_Template","ɵɵprojectionDef","ɵɵprojection","length","directives","NgIf","NzTreeNodeIndentsComponent","NzTreeNodeNoopToggleDirective","NzTreeNodeDefDirective","ɵNzTreeNodeDefDirective_BaseFactory","NzTreeNodeDefDirective_Factory","ɵɵgetInheritedFactory","ɵdir","ɵɵdefineDirective","when","NzTreeVirtualScrollNodeOutletDirective","_viewContainerRef","_viewRef","changes","recreateView","shouldRecreateView","viewContainerRef","remove","indexOf","createEmbeddedView","nodeDef","context","mostRecentTreeNode","updateExistingContext","ctxChange","hasContextShapeChanged","prevCtxKeys","keys","previousValue","currCtxKeys","currentValue","propName","NzTreeVirtualScrollNodeOutletDirective_Factory","ɵɵNgOnChangesFeature","getParent","nodes","node","getLevel","index","level","preLevel","getNextSibling","_index","nextLevel","booleanArrayToString","arr","i","join","BUILD_INDENTS_SCHEDULER","requestAnimationFrame","NzTreeNodeIndentsComponent_Factory","NzTreeNodeIndentsComponent_Template","NgForOf","NzTreeNodeIndentLineDirective","treeNode","isLast","preNodeRef","nextNodeRef","currentIndents","buildIndents","checkLast","changeSubscription","_dataChanges","checkAdjacent","dataNodes","parent","parentNextSibling","unshift","getIndents","diffString","setIndents","preNode","nextNode","unsubscribe","NzTreeNodeIndentLineDirective_Factory","NzTreeNodeIndentLineDirective_HostBindings","NzTreeNodeOptionComponent","nzSelected","disable","enable","select","deselect","NzTreeNodeOptionComponent_Factory","NzTreeNodeOptionComponent_HostBindings","NzTreeNodeOptionComponent_click_HostBindingHandler","NzTreeNodeOptionComponent_Template","ngDevMode","ɵsetClassMetadata","selector","OnPush","preserveWhitespaces","host","class","providers","NzTreeNodeOutletDirective","_node","NzTreeNodeOutletDirective_Factory","undefined","NzTreeNodePaddingDirective","arguments","_indent","_level","_setLevelInput","indent","_setIndentInput","ɵNzTreeNodePaddingDirective_BaseFactory","NzTreeNodePaddingDirective_Factory","NzTreeNodeNoopToggleDirective_Factory","NzTreeNodeToggleDirective","_recursive","_treeNode","ɵNzTreeNodeToggleDirective_BaseFactory","NzTreeNodeToggleDirective_Factory","NzTreeNodeToggleDirective_HostBindings","recursive","NzTreeNodeToggleRotateIconDirective","NzTreeNodeToggleRotateIconDirective_Factory","NzTreeNodeToggleActiveIconDirective","NzTreeNodeToggleActiveIconDirective_Factory","NzTreeViewComponent","_afterViewInit","Promise","resolve","then","ɵNzTreeViewComponent_BaseFactory","NzTreeViewComponent_Factory","viewQuery","NzTreeViewComponent_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","nodeOutlet","first","NzTreeViewComponent_HostBindings","NzTreeViewComponent_Template","ɵɵelementContainer","nzNoAnimation","_nodeOutlet","animation","static","None","animations","DEFAULT_SIZE","NzTreeVirtualScrollViewComponent","itemSize","nzNodeWidth","nzItemSize","nzMinBufferPx","nzMaxBufferPx","Array","n","createNode","nodeData","_getNodeDef","ɵNzTreeVirtualScrollViewComponent_BaseFactory","NzTreeVirtualScrollViewComponent_Factory","NzTreeVirtualScrollViewComponent_Query","virtualScrollViewport","NzTreeVirtualScrollViewComponent_HostBindings","NzTreeVirtualScrollViewComponent_Template","CdkFixedSizeVirtualScroll","CdkVirtualForOf","treeWithControlComponents","NzTreeViewModule","NzTreeViewModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports","ngJitMode","ɵɵsetNgModuleScope","NzTreeFlattener","transformFunction","getChildren","resultNodes","parentMap","flatNode","push","childrenNodes","isArray","flattenChildren","children","forEach","child","childParentMap","slice","flattenNode","structuredData","results","currentExpand","expand","NzTreeFlatDataSource","_treeControl","_treeFlattener","initialData","_flattenedData","_expandedData","_data","flatNodes","getValue","collectionViewer","viewChange","expansionModel","changed","expandFlattenedNodes","flattenNodes","getData","ɵa"],"mappings":"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","sourcesContent":["import { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { CdkVirtualScrollViewport, ScrollingModule } from '@angular/cdk/scrolling';\nimport { CommonModule } from '@angular/common';\nimport { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, IterableDiffers, ChangeDetectorRef, Host, Optional, ElementRef, Renderer2, Directive, ViewContainerRef, Inject, ViewEncapsulation, ViewChild, NgModule } from '@angular/core';\nimport { NzNoAnimationDirective, NzNoAnimationModule } from 'ng-zorro-antd/core/no-animation';\nimport { __decorate, __metadata } from 'tslib';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport { Subject, animationFrameScheduler, asapScheduler, merge, BehaviorSubject } from 'rxjs';\nimport { takeUntil, auditTime, take, map } from 'rxjs/operators';\nimport { CdkTree, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodeOutlet, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTreeNodeOutletContext } from '@angular/cdk/tree';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { treeCollapseMotion } from 'ng-zorro-antd/core/animation';\nimport { warnDeprecation } from 'ng-zorro-antd/core/logger';\nimport { DataSource } from '@angular/cdk/collections';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'ng-zorro-antd/core/no-animation';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/common';\nimport * as ɵngcc4 from '@angular/cdk/scrolling';\n\nfunction NzTreeNodeComponent_nz_tree_node_indents_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"nz-tree-node-indents\", 2);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"indents\", ctx_r0.indents);\n} }\nfunction NzTreeNodeComponent_nz_tree_node_toggle_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"nz-tree-node-toggle\", 3);\n    ɵngcc0.ɵɵelement(1, \"span\", 4);\n    ɵngcc0.ɵɵelementEnd();\n} }\nconst _c0 = [[[\"nz-tree-node-toggle\"], [\"\", \"nz-tree-node-toggle\", \"\"]], [[\"nz-tree-node-checkbox\"]], [[\"nz-tree-node-option\"]], \"*\"];\nconst _c1 = [\"nz-tree-node-toggle, [nz-tree-node-toggle]\", \"nz-tree-node-checkbox\", \"nz-tree-node-option\", \"*\"];\nfunction NzTreeNodeIndentsComponent_span_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 1);\n} if (rf & 2) {\n    const isEnd_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵclassProp(\"ant-tree-indent-unit-end\", !isEnd_r1);\n} }\nconst _c2 = [\"*\"];\nfunction NzTreeVirtualScrollViewComponent_ng_container_2_ng_template_1_Template(rf, ctx) { }\nfunction NzTreeVirtualScrollViewComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, NzTreeVirtualScrollViewComponent_ng_container_2_ng_template_1_Template, 0, 0, \"ng-template\", 4);\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"data\", item_r1);\n} }\nclass NzTreeNodeCheckboxComponent {\n    constructor() {\n        this.nzClick = new EventEmitter();\n    }\n    onClick(e) {\n        if (!this.nzDisabled) {\n            this.nzClick.emit(e);\n        }\n    }\n}\nNzTreeNodeCheckboxComponent.ɵfac = function NzTreeNodeCheckboxComponent_Factory(t) { return new (t || NzTreeNodeCheckboxComponent)(); };\nNzTreeNodeCheckboxComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NzTreeNodeCheckboxComponent, selectors: [[\"nz-tree-node-checkbox\", 3, \"builtin\", \"\"]], hostAttrs: [1, \"ant-tree-checkbox\"], hostVars: 6, hostBindings: function NzTreeNodeCheckboxComponent_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function NzTreeNodeCheckboxComponent_click_HostBindingHandler($event) { return ctx.onClick($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-tree-checkbox-checked\", ctx.nzChecked)(\"ant-tree-checkbox-indeterminate\", ctx.nzIndeterminate)(\"ant-tree-checkbox-disabled\", ctx.nzDisabled);\n    } }, inputs: { nzChecked: \"nzChecked\", nzIndeterminate: \"nzIndeterminate\", nzDisabled: \"nzDisabled\" }, outputs: { nzClick: \"nzClick\" }, decls: 1, vars: 0, consts: [[1, \"ant-tree-checkbox-inner\"]], template: function NzTreeNodeCheckboxComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"span\", 0);\n    } }, encapsulation: 2, changeDetection: 0 });\nNzTreeNodeCheckboxComponent.propDecorators = {\n    nzChecked: [{ type: Input }],\n    nzIndeterminate: [{ type: Input }],\n    nzDisabled: [{ type: Input }],\n    nzClick: [{ type: Output }]\n};\n__decorate([\n    InputBoolean(),\n    __metadata(\"design:type\", Boolean)\n], NzTreeNodeCheckboxComponent.prototype, \"nzDisabled\", void 0);\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n// tslint:disable-next-line: component-class-suffix\nclass NzTreeView extends CdkTree {\n    constructor(differs, changeDetectorRef, noAnimation, directionality) {\n        super(differs, changeDetectorRef);\n        this.differs = differs;\n        this.changeDetectorRef = changeDetectorRef;\n        this.noAnimation = noAnimation;\n        this.directionality = directionality;\n        this.destroy$ = new Subject();\n        this.dir = 'ltr';\n        this._dataSourceChanged = new Subject();\n        this.nzDirectoryTree = false;\n        this.nzBlockNode = false;\n    }\n    get dataSource() {\n        return super.dataSource;\n    }\n    set dataSource(dataSource) {\n        super.dataSource = dataSource;\n    }\n    ngOnInit() {\n        var _a;\n        super.ngOnInit();\n        if (this.directionality) {\n            this.dir = this.directionality.value;\n            (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe((direction) => {\n                this.dir = direction;\n                this.changeDetectorRef.detectChanges();\n            });\n        }\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n    renderNodeChanges(data, dataDiffer, viewContainer, parentData) {\n        super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);\n        this._dataSourceChanged.next();\n    }\n}\nNzTreeView.ɵfac = function NzTreeView_Factory(t) { return new (t || NzTreeView)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NzNoAnimationDirective, 9), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8)); };\nNzTreeView.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NzTreeView, selectors: [[\"ng-component\"]], inputs: { nzDirectoryTree: \"nzDirectoryTree\", nzBlockNode: \"nzBlockNode\", dataSource: [\"nzDataSource\", \"dataSource\"], treeControl: [\"nzTreeControl\", \"treeControl\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function NzTreeView_Template(rf, ctx) { }, encapsulation: 2 });\nNzTreeView.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef },\n    { type: NzNoAnimationDirective, decorators: [{ type: Host }, { type: Optional }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nNzTreeView.propDecorators = {\n    treeControl: [{ type: Input, args: ['nzTreeControl',] }],\n    dataSource: [{ type: Input, args: ['nzDataSource',] }],\n    nzDirectoryTree: [{ type: Input }],\n    nzBlockNode: [{ type: Input }]\n};\n__decorate([\n    InputBoolean(),\n    __metadata(\"design:type\", Object)\n], NzTreeView.prototype, \"nzDirectoryTree\", void 0);\n__decorate([\n    InputBoolean(),\n    __metadata(\"design:type\", Object)\n], NzTreeView.prototype, \"nzBlockNode\", void 0);\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTreeNodeComponent extends CdkTreeNode {\n    constructor(elementRef, tree, renderer, cdr) {\n        super(elementRef, tree);\n        this.elementRef = elementRef;\n        this.tree = tree;\n        this.renderer = renderer;\n        this.cdr = cdr;\n        this.indents = [];\n        this.disabled = false;\n        this.selected = false;\n        this.isLeaf = false;\n        this._elementRef.nativeElement.classList.add('ant-tree-treenode');\n    }\n    ngOnInit() {\n        this.isLeaf = !this.tree.treeControl.isExpandable(this.data);\n    }\n    disable() {\n        this.disabled = true;\n        this.updateDisabledClass();\n    }\n    enable() {\n        this.disabled = false;\n        this.updateDisabledClass();\n    }\n    select() {\n        this.selected = true;\n        this.updateSelectedClass();\n    }\n    deselect() {\n        this.selected = false;\n        this.updateSelectedClass();\n    }\n    setIndents(indents) {\n        this.indents = indents;\n        this.cdr.markForCheck();\n    }\n    updateSelectedClass() {\n        if (this.selected) {\n            this.renderer.addClass(this.elementRef.nativeElement, 'ant-tree-treenode-selected');\n        }\n        else {\n            this.renderer.removeClass(this.elementRef.nativeElement, 'ant-tree-treenode-selected');\n        }\n    }\n    updateDisabledClass() {\n        if (this.disabled) {\n            this.renderer.addClass(this.elementRef.nativeElement, 'ant-tree-treenode-disabled');\n        }\n        else {\n            this.renderer.removeClass(this.elementRef.nativeElement, 'ant-tree-treenode-disabled');\n        }\n    }\n}\nNzTreeNodeComponent.ɵfac = function NzTreeNodeComponent_Factory(t) { return new (t || NzTreeNodeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(NzTreeView), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nNzTreeNodeComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NzTreeNodeComponent, selectors: [[\"nz-tree-node\", 3, \"builtin\", \"\"]], hostVars: 4, hostBindings: function NzTreeNodeComponent_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-tree-treenode-switcher-open\", ctx.isExpanded)(\"ant-tree-treenode-switcher-close\", !ctx.isExpanded);\n    } }, exportAs: [\"nzTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNode, useExisting: NzTreeNodeComponent }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 6, vars: 2, consts: [[3, \"indents\", 4, \"ngIf\"], [\"class\", \"nz-tree-leaf-line-icon\", \"nzTreeNodeNoopToggle\", \"\", 4, \"ngIf\"], [3, \"indents\"], [\"nzTreeNodeNoopToggle\", \"\", 1, \"nz-tree-leaf-line-icon\"], [1, \"ant-tree-switcher-leaf-line\"]], template: function NzTreeNodeComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵtemplate(0, NzTreeNodeComponent_nz_tree_node_indents_0_Template, 1, 1, \"nz-tree-node-indents\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵtemplate(2, NzTreeNodeComponent_nz_tree_node_toggle_2_Template, 2, 0, \"nz-tree-node-toggle\", 1);\n        ɵngcc0.ɵɵprojection(3, 1);\n        ɵngcc0.ɵɵprojection(4, 2);\n        ɵngcc0.ɵɵprojection(5, 3);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.indents.length);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.indents.length && ctx.isLeaf);\n    } }, directives: function () { return [ɵngcc3.NgIf, NzTreeNodeIndentsComponent, NzTreeNodeNoopToggleDirective]; }, encapsulation: 2, changeDetection: 0 });\nNzTreeNodeComponent.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NzTreeView },\n    { type: Renderer2 },\n    { type: ChangeDetectorRef }\n];\nclass NzTreeNodeDefDirective extends CdkTreeNodeDef {\n}\nNzTreeNodeDefDirective.ɵfac = /*@__PURE__*/ function () { let ɵNzTreeNodeDefDirective_BaseFactory; return function NzTreeNodeDefDirective_Factory(t) { return (ɵNzTreeNodeDefDirective_BaseFactory || (ɵNzTreeNodeDefDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(NzTreeNodeDefDirective)))(t || NzTreeNodeDefDirective); }; }();\nNzTreeNodeDefDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NzTreeNodeDefDirective, selectors: [[\"\", \"nzTreeNodeDef\", \"\"]], inputs: { when: [\"nzTreeNodeDefWhen\", \"when\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodeDef, useExisting: NzTreeNodeDefDirective }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nNzTreeNodeDefDirective.propDecorators = {\n    when: [{ type: Input, args: ['nzTreeNodeDefWhen',] }]\n};\nclass NzTreeVirtualScrollNodeOutletDirective {\n    constructor(_viewContainerRef) {\n        this._viewContainerRef = _viewContainerRef;\n        this._viewRef = null;\n    }\n    ngOnChanges(changes) {\n        const recreateView = this.shouldRecreateView(changes);\n        if (recreateView) {\n            const viewContainerRef = this._viewContainerRef;\n            if (this._viewRef) {\n                viewContainerRef.remove(viewContainerRef.indexOf(this._viewRef));\n            }\n            this._viewRef = this.data ? viewContainerRef.createEmbeddedView(this.data.nodeDef.template, this.data.context) : null;\n            if (CdkTreeNode.mostRecentTreeNode && this._viewRef) {\n                CdkTreeNode.mostRecentTreeNode.data = this.data.data;\n            }\n        }\n        else if (this._viewRef && this.data.context) {\n            this.updateExistingContext(this.data.context);\n        }\n    }\n    shouldRecreateView(changes) {\n        const ctxChange = changes.data;\n        return !!changes.data || (ctxChange && this.hasContextShapeChanged(ctxChange));\n    }\n    hasContextShapeChanged(ctxChange) {\n        const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n        const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n        if (prevCtxKeys.length === currCtxKeys.length) {\n            for (const propName of currCtxKeys) {\n                if (prevCtxKeys.indexOf(propName) === -1) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        return true;\n    }\n    updateExistingContext(ctx) {\n        for (const propName of Object.keys(ctx)) {\n            this._viewRef.context[propName] = this.data.context[propName];\n        }\n    }\n}\nNzTreeVirtualScrollNodeOutletDirective.ɵfac = function NzTreeVirtualScrollNodeOutletDirective_Factory(t) { return new (t || NzTreeVirtualScrollNodeOutletDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };\nNzTreeVirtualScrollNodeOutletDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NzTreeVirtualScrollNodeOutletDirective, selectors: [[\"\", \"nzTreeVirtualScrollNodeOutlet\", \"\"]], inputs: { data: \"data\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nNzTreeVirtualScrollNodeOutletDirective.ctorParameters = () => [\n    { type: ViewContainerRef }\n];\nNzTreeVirtualScrollNodeOutletDirective.propDecorators = {\n    data: [{ type: Input }]\n};\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nfunction getParent(nodes, node, getLevel) {\n    let index = nodes.indexOf(node);\n    if (index < 0) {\n        return null;\n    }\n    const level = getLevel(node);\n    for (index--; index >= 0; index--) {\n        const preLevel = getLevel(nodes[index]);\n        if (preLevel + 1 === level) {\n            return nodes[index];\n        }\n        if (preLevel + 1 < level) {\n            return null;\n        }\n    }\n    return null;\n}\nfunction getNextSibling(nodes, node, getLevel, _index) {\n    let index = typeof _index !== 'undefined' ? _index : nodes.indexOf(node);\n    if (index < 0) {\n        return null;\n    }\n    const level = getLevel(node);\n    for (index++; index < nodes.length; index++) {\n        const nextLevel = getLevel(nodes[index]);\n        if (nextLevel < level) {\n            return null;\n        }\n        if (nextLevel === level) {\n            return nodes[index];\n        }\n    }\n    return null;\n}\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n/**\n * [true, false, false, true] => 1001\n */\nfunction booleanArrayToString(arr) {\n    return arr.map(i => (i ? 1 : 0)).join('');\n}\nconst BUILD_INDENTS_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\nclass NzTreeNodeIndentsComponent {\n    constructor() {\n        this.indents = [];\n    }\n}\nNzTreeNodeIndentsComponent.ɵfac = function NzTreeNodeIndentsComponent_Factory(t) { return new (t || NzTreeNodeIndentsComponent)(); };\nNzTreeNodeIndentsComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NzTreeNodeIndentsComponent, selectors: [[\"nz-tree-node-indents\"]], hostAttrs: [1, \"ant-tree-indent\"], inputs: { indents: \"indents\" }, decls: 1, vars: 1, consts: [[\"class\", \"ant-tree-indent-unit\", 3, \"ant-tree-indent-unit-end\", 4, \"ngFor\", \"ngForOf\"], [1, \"ant-tree-indent-unit\"]], template: function NzTreeNodeIndentsComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, NzTreeNodeIndentsComponent_span_0_Template, 1, 2, \"span\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.indents);\n    } }, directives: [ɵngcc3.NgForOf], encapsulation: 2, changeDetection: 0 });\nNzTreeNodeIndentsComponent.propDecorators = {\n    indents: [{ type: Input }]\n};\nclass NzTreeNodeIndentLineDirective {\n    constructor(treeNode, tree) {\n        this.treeNode = treeNode;\n        this.tree = tree;\n        this.isLast = 'unset';\n        this.isLeaf = false;\n        this.preNodeRef = null;\n        this.nextNodeRef = null;\n        this.currentIndents = '';\n        this.buildIndents();\n        this.checkLast();\n        /**\n         * The dependent data (TreeControl.dataNodes) can be set after node instantiation,\n         * and setting the indents can cause frame rate loss if it is set too often.\n         */\n        this.changeSubscription = merge(this.treeNode._dataChanges, tree._dataSourceChanged)\n            .pipe(auditTime(0, BUILD_INDENTS_SCHEDULER))\n            .subscribe(() => {\n            this.buildIndents();\n            this.checkAdjacent();\n        });\n    }\n    getIndents() {\n        const indents = [];\n        const nodes = this.tree.treeControl.dataNodes;\n        const getLevel = this.tree.treeControl.getLevel;\n        let parent = getParent(nodes, this.treeNode.data, getLevel);\n        while (parent) {\n            const parentNextSibling = getNextSibling(nodes, parent, getLevel);\n            if (parentNextSibling) {\n                indents.unshift(true);\n            }\n            else {\n                indents.unshift(false);\n            }\n            parent = getParent(nodes, parent, getLevel);\n        }\n        return indents;\n    }\n    buildIndents() {\n        if (this.treeNode.data) {\n            const indents = this.getIndents();\n            const diffString = booleanArrayToString(indents);\n            if (diffString !== this.currentIndents) {\n                this.treeNode.setIndents(this.getIndents());\n                this.currentIndents = diffString;\n            }\n        }\n    }\n    /**\n     * We need to add an class name for the last child node,\n     * this result can also be affected when the adjacent nodes are changed.\n     */\n    checkAdjacent() {\n        const nodes = this.tree.treeControl.dataNodes;\n        const index = nodes.indexOf(this.treeNode.data);\n        const preNode = nodes[index - 1] || null;\n        const nextNode = nodes[index + 1] || null;\n        if (this.nextNodeRef !== nextNode || this.preNodeRef !== preNode) {\n            this.checkLast(index);\n        }\n        this.preNodeRef = preNode;\n        this.nextNodeRef = nextNode;\n    }\n    checkLast(index) {\n        const nodes = this.tree.treeControl.dataNodes;\n        this.isLeaf = this.treeNode.isLeaf;\n        this.isLast = !getNextSibling(nodes, this.treeNode.data, this.tree.treeControl.getLevel, index);\n    }\n    ngOnDestroy() {\n        this.preNodeRef = null;\n        this.nextNodeRef = null;\n        this.changeSubscription.unsubscribe();\n    }\n}\nNzTreeNodeIndentLineDirective.ɵfac = function NzTreeNodeIndentLineDirective_Factory(t) { return new (t || NzTreeNodeIndentLineDirective)(ɵngcc0.ɵɵdirectiveInject(NzTreeNodeComponent), ɵngcc0.ɵɵdirectiveInject(NzTreeView)); };\nNzTreeNodeIndentLineDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NzTreeNodeIndentLineDirective, selectors: [[\"nz-tree-node\", \"nzTreeNodeIndentLine\", \"\"]], hostAttrs: [1, \"ant-tree-show-line\"], hostVars: 2, hostBindings: function NzTreeNodeIndentLineDirective_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-tree-treenode-leaf-last\", ctx.isLast && ctx.isLeaf);\n    } } });\nNzTreeNodeIndentLineDirective.ctorParameters = () => [\n    { type: NzTreeNodeComponent },\n    { type: NzTreeView }\n];\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTreeNodeOptionComponent {\n    constructor(treeNode) {\n        this.treeNode = treeNode;\n        this.nzSelected = false;\n        this.nzDisabled = false;\n        this.nzClick = new EventEmitter();\n    }\n    get isExpanded() {\n        return this.treeNode.isExpanded;\n    }\n    onClick(e) {\n        if (!this.nzDisabled) {\n            this.nzClick.emit(e);\n        }\n    }\n    ngOnChanges(changes) {\n        const { nzDisabled, nzSelected } = changes;\n        if (nzDisabled) {\n            if (nzDisabled.currentValue) {\n                this.treeNode.disable();\n            }\n            else {\n                this.treeNode.enable();\n            }\n        }\n        if (nzSelected) {\n            if (nzSelected.currentValue) {\n                this.treeNode.select();\n            }\n            else {\n                this.treeNode.deselect();\n            }\n        }\n    }\n}\nNzTreeNodeOptionComponent.ɵfac = function NzTreeNodeOptionComponent_Factory(t) { return new (t || NzTreeNodeOptionComponent)(ɵngcc0.ɵɵdirectiveInject(NzTreeNodeComponent)); };\nNzTreeNodeOptionComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NzTreeNodeOptionComponent, selectors: [[\"nz-tree-node-option\"]], hostAttrs: [1, \"ant-tree-node-content-wrapper\"], hostVars: 4, hostBindings: function NzTreeNodeOptionComponent_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function NzTreeNodeOptionComponent_click_HostBindingHandler($event) { return ctx.onClick($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-tree-node-content-wrapper-open\", ctx.isExpanded)(\"ant-tree-node-selected\", ctx.nzSelected);\n    } }, inputs: { nzSelected: \"nzSelected\", nzDisabled: \"nzDisabled\" }, outputs: { nzClick: \"nzClick\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c2, decls: 2, vars: 0, consts: [[1, \"ant-tree-title\"]], template: function NzTreeNodeOptionComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"span\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, encapsulation: 2, changeDetection: 0 });\nNzTreeNodeOptionComponent.ctorParameters = () => [\n    { type: NzTreeNodeComponent }\n];\nNzTreeNodeOptionComponent.propDecorators = {\n    nzSelected: [{ type: Input }],\n    nzDisabled: [{ type: Input }],\n    nzClick: [{ type: Output }]\n};\n__decorate([\n    InputBoolean(),\n    __metadata(\"design:type\", Object)\n], NzTreeNodeOptionComponent.prototype, \"nzSelected\", void 0);\n__decorate([\n    InputBoolean(),\n    __metadata(\"design:type\", Object)\n], NzTreeNodeOptionComponent.prototype, \"nzDisabled\", void 0);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeNodeCheckboxComponent, [{\n        type: Component,\n        args: [{\n                selector: 'nz-tree-node-checkbox:not([builtin])',\n                template: `\n    <span class=\"ant-tree-checkbox-inner\"></span>\n  `,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                preserveWhitespaces: false,\n                host: {\n                    class: 'ant-tree-checkbox',\n                    '[class.ant-tree-checkbox-checked]': `nzChecked`,\n                    '[class.ant-tree-checkbox-indeterminate]': `nzIndeterminate`,\n                    '[class.ant-tree-checkbox-disabled]': `nzDisabled`,\n                    '(click)': 'onClick($event)'\n                }\n            }]\n    }], function () { return []; }, { nzClick: [{\n            type: Output\n        }], nzChecked: [{\n            type: Input\n        }], nzIndeterminate: [{\n            type: Input\n        }], nzDisabled: [{\n            type: Input\n        }] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeView, [{\n        type: Component,\n        args: [{ template: '' }]\n    }], function () { return [{ type: ɵngcc0.IterableDiffers }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.NzNoAnimationDirective, decorators: [{\n                type: Host\n            }, {\n                type: Optional\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { nzDirectoryTree: [{\n            type: Input\n        }], nzBlockNode: [{\n            type: Input\n        }], dataSource: [{\n            type: Input,\n            args: ['nzDataSource']\n        }], treeControl: [{\n            type: Input,\n            args: ['nzTreeControl']\n        }] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeNodeComponent, [{\n        type: Component,\n        args: [{\n                selector: 'nz-tree-node:not([builtin])',\n                exportAs: 'nzTreeNode',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                providers: [{ provide: CdkTreeNode, useExisting: NzTreeNodeComponent }],\n                template: `\n    <nz-tree-node-indents [indents]=\"indents\" *ngIf=\"indents.length\"></nz-tree-node-indents>\n    <ng-content select=\"nz-tree-node-toggle, [nz-tree-node-toggle]\"></ng-content>\n    <nz-tree-node-toggle class=\"nz-tree-leaf-line-icon\" *ngIf=\"indents.length && isLeaf\" nzTreeNodeNoopToggle>\n      <span class=\"ant-tree-switcher-leaf-line\"></span>\n    </nz-tree-node-toggle>\n    <ng-content select=\"nz-tree-node-checkbox\"></ng-content>\n    <ng-content select=\"nz-tree-node-option\"></ng-content>\n    <ng-content></ng-content>\n  `,\n                host: {\n                    '[class.ant-tree-treenode-switcher-open]': 'isExpanded',\n                    '[class.ant-tree-treenode-switcher-close]': '!isExpanded'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: NzTreeView }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ChangeDetectorRef }]; }, null); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeNodeDefDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[nzTreeNodeDef]',\n                providers: [{ provide: CdkTreeNodeDef, useExisting: NzTreeNodeDefDirective }]\n            }]\n    }], null, { when: [{\n            type: Input,\n            args: ['nzTreeNodeDefWhen']\n        }] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeVirtualScrollNodeOutletDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[nzTreeVirtualScrollNodeOutlet]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, { data: [{\n            type: Input\n        }] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeNodeIndentsComponent, [{\n        type: Component,\n        args: [{\n                selector: 'nz-tree-node-indents',\n                template: `\n    <span class=\"ant-tree-indent-unit\" [class.ant-tree-indent-unit-end]=\"!isEnd\" *ngFor=\"let isEnd of indents\"></span>\n  `,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    class: 'ant-tree-indent'\n                }\n            }]\n    }], function () { return []; }, { indents: [{\n            type: Input\n        }] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeNodeIndentLineDirective, [{\n        type: Directive,\n        args: [{\n                selector: 'nz-tree-node[nzTreeNodeIndentLine]',\n                host: {\n                    class: 'ant-tree-show-line',\n                    '[class.ant-tree-treenode-leaf-last]': 'isLast && isLeaf'\n                }\n            }]\n    }], function () { return [{ type: NzTreeNodeComponent }, { type: NzTreeView }]; }, null); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeNodeOptionComponent, [{\n        type: Component,\n        args: [{\n                selector: 'nz-tree-node-option',\n                template: `\n    <span class=\"ant-tree-title\"><ng-content></ng-content></span>\n  `,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    class: 'ant-tree-node-content-wrapper',\n                    '[class.ant-tree-node-content-wrapper-open]': 'isExpanded',\n                    '[class.ant-tree-node-selected]': 'nzSelected',\n                    '(click)': 'onClick($event)'\n                }\n            }]\n    }], function () { return [{ type: NzTreeNodeComponent }]; }, { nzSelected: [{\n            type: Input\n        }], nzDisabled: [{\n            type: Input\n        }], nzClick: [{\n            type: Output\n        }] }); })();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTreeNodeOutletDirective {\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n}\nNzTreeNodeOutletDirective.ɵfac = function NzTreeNodeOutletDirective_Factory(t) { return new (t || NzTreeNodeOutletDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8)); };\nNzTreeNodeOutletDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NzTreeNodeOutletDirective, selectors: [[\"\", \"nzTreeNodeOutlet\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([\n            {\n                provide: CdkTreeNodeOutlet,\n                useExisting: NzTreeNodeOutletDirective\n            }\n        ])] });\nNzTreeNodeOutletDirective.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeNodeOutletDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[nzTreeNodeOutlet]',\n                providers: [\n                    {\n                        provide: CdkTreeNodeOutlet,\n                        useExisting: NzTreeNodeOutletDirective\n                    }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TREE_NODE_OUTLET_NODE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTreeNodePaddingDirective extends CdkTreeNodePadding {\n    constructor() {\n        super(...arguments);\n        this._indent = 24;\n    }\n    get level() {\n        return this._level;\n    }\n    set level(value) {\n        this._setLevelInput(value);\n    }\n    get indent() {\n        return this._indent;\n    }\n    set indent(indent) {\n        this._setIndentInput(indent);\n    }\n}\nNzTreeNodePaddingDirective.ɵfac = /*@__PURE__*/ function () { let ɵNzTreeNodePaddingDirective_BaseFactory; return function NzTreeNodePaddingDirective_Factory(t) { return (ɵNzTreeNodePaddingDirective_BaseFactory || (ɵNzTreeNodePaddingDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(NzTreeNodePaddingDirective)))(t || NzTreeNodePaddingDirective); }; }();\nNzTreeNodePaddingDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NzTreeNodePaddingDirective, selectors: [[\"\", \"nzTreeNodePadding\", \"\"]], inputs: { level: [\"nzTreeNodePadding\", \"level\"], indent: [\"nzTreeNodePaddingIndent\", \"indent\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodePadding, useExisting: NzTreeNodePaddingDirective }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nNzTreeNodePaddingDirective.propDecorators = {\n    level: [{ type: Input, args: ['nzTreeNodePadding',] }],\n    indent: [{ type: Input, args: ['nzTreeNodePaddingIndent',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeNodePaddingDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[nzTreeNodePadding]',\n                providers: [{ provide: CdkTreeNodePadding, useExisting: NzTreeNodePaddingDirective }]\n            }]\n    }], null, { level: [{\n            type: Input,\n            args: ['nzTreeNodePadding']\n        }], indent: [{\n            type: Input,\n            args: ['nzTreeNodePaddingIndent']\n        }] }); })();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTreeNodeNoopToggleDirective {\n}\nNzTreeNodeNoopToggleDirective.ɵfac = function NzTreeNodeNoopToggleDirective_Factory(t) { return new (t || NzTreeNodeNoopToggleDirective)(); };\nNzTreeNodeNoopToggleDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NzTreeNodeNoopToggleDirective, selectors: [[\"nz-tree-node-toggle\", \"nzTreeNodeNoopToggle\", \"\"], [\"\", \"nzTreeNodeNoopToggle\", \"\"]], hostAttrs: [1, \"ant-tree-switcher\", \"ant-tree-switcher-noop\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeNodeNoopToggleDirective, [{\n        type: Directive,\n        args: [{\n                selector: 'nz-tree-node-toggle[nzTreeNodeNoopToggle], [nzTreeNodeNoopToggle]',\n                host: {\n                    class: 'ant-tree-switcher ant-tree-switcher-noop'\n                }\n            }]\n    }], null, null); })();\nclass NzTreeNodeToggleDirective extends CdkTreeNodeToggle {\n    get recursive() {\n        return this._recursive;\n    }\n    set recursive(value) {\n        this._recursive = coerceBooleanProperty(value);\n    }\n    get isExpanded() {\n        return this._treeNode.isExpanded;\n    }\n}\nNzTreeNodeToggleDirective.ɵfac = /*@__PURE__*/ function () { let ɵNzTreeNodeToggleDirective_BaseFactory; return function NzTreeNodeToggleDirective_Factory(t) { return (ɵNzTreeNodeToggleDirective_BaseFactory || (ɵNzTreeNodeToggleDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(NzTreeNodeToggleDirective)))(t || NzTreeNodeToggleDirective); }; }();\nNzTreeNodeToggleDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NzTreeNodeToggleDirective, selectors: [[\"nz-tree-node-toggle\", 3, \"nzTreeNodeNoopToggle\", \"\"], [\"\", \"nzTreeNodeToggle\", \"\"]], hostAttrs: [1, \"ant-tree-switcher\"], hostVars: 4, hostBindings: function NzTreeNodeToggleDirective_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-tree-switcher_open\", ctx.isExpanded)(\"ant-tree-switcher_close\", !ctx.isExpanded);\n    } }, inputs: { recursive: [\"nzTreeNodeToggleRecursive\", \"recursive\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodeToggle, useExisting: NzTreeNodeToggleDirective }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nNzTreeNodeToggleDirective.propDecorators = {\n    recursive: [{ type: Input, args: ['nzTreeNodeToggleRecursive',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeNodeToggleDirective, [{\n        type: Directive,\n        args: [{\n                selector: 'nz-tree-node-toggle:not([nzTreeNodeNoopToggle]), [nzTreeNodeToggle]',\n                providers: [{ provide: CdkTreeNodeToggle, useExisting: NzTreeNodeToggleDirective }],\n                host: {\n                    class: 'ant-tree-switcher',\n                    '[class.ant-tree-switcher_open]': 'isExpanded',\n                    '[class.ant-tree-switcher_close]': '!isExpanded'\n                }\n            }]\n    }], null, { recursive: [{\n            type: Input,\n            args: ['nzTreeNodeToggleRecursive']\n        }] }); })();\nclass NzTreeNodeToggleRotateIconDirective {\n}\nNzTreeNodeToggleRotateIconDirective.ɵfac = function NzTreeNodeToggleRotateIconDirective_Factory(t) { return new (t || NzTreeNodeToggleRotateIconDirective)(); };\nNzTreeNodeToggleRotateIconDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NzTreeNodeToggleRotateIconDirective, selectors: [[\"\", \"nz-icon\", \"\", \"nzTreeNodeToggleRotateIcon\", \"\"]], hostAttrs: [1, \"ant-tree-switcher-icon\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeNodeToggleRotateIconDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[nz-icon][nzTreeNodeToggleRotateIcon]',\n                host: {\n                    class: 'ant-tree-switcher-icon'\n                }\n            }]\n    }], null, null); })();\nclass NzTreeNodeToggleActiveIconDirective {\n}\nNzTreeNodeToggleActiveIconDirective.ɵfac = function NzTreeNodeToggleActiveIconDirective_Factory(t) { return new (t || NzTreeNodeToggleActiveIconDirective)(); };\nNzTreeNodeToggleActiveIconDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NzTreeNodeToggleActiveIconDirective, selectors: [[\"\", \"nz-icon\", \"\", \"nzTreeNodeToggleActiveIcon\", \"\"]], hostAttrs: [1, \"ant-tree-switcher-loading-icon\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeNodeToggleActiveIconDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[nz-icon][nzTreeNodeToggleActiveIcon]',\n                host: {\n                    class: 'ant-tree-switcher-loading-icon'\n                }\n            }]\n    }], null, null); })();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTreeViewComponent extends NzTreeView {\n    constructor() {\n        super(...arguments);\n        this._afterViewInit = false;\n    }\n    ngAfterViewInit() {\n        Promise.resolve().then(() => {\n            this._afterViewInit = true;\n            this.changeDetectorRef.markForCheck();\n        });\n    }\n}\nNzTreeViewComponent.ɵfac = /*@__PURE__*/ function () { let ɵNzTreeViewComponent_BaseFactory; return function NzTreeViewComponent_Factory(t) { return (ɵNzTreeViewComponent_BaseFactory || (ɵNzTreeViewComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(NzTreeViewComponent)))(t || NzTreeViewComponent); }; }();\nNzTreeViewComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NzTreeViewComponent, selectors: [[\"nz-tree-view\"]], viewQuery: function NzTreeViewComponent_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(NzTreeNodeOutletDirective, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t.first);\n    } }, hostAttrs: [1, \"ant-tree\"], hostVars: 6, hostBindings: function NzTreeViewComponent_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-tree-block-node\", ctx.nzDirectoryTree || ctx.nzBlockNode)(\"ant-tree-directory\", ctx.nzDirectoryTree)(\"ant-tree-rtl\", ctx.dir === \"rtl\");\n    } }, exportAs: [\"nzTreeView\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CdkTree, useExisting: NzTreeViewComponent },\n            { provide: NzTreeView, useExisting: NzTreeViewComponent }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 2, consts: [[1, \"ant-tree-list-holder\"], [1, \"ant-tree-list-holder-inner\"], [\"nzTreeNodeOutlet\", \"\"]], template: function NzTreeViewComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵelementContainer(2, 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"@.disabled\", !ctx._afterViewInit || (ctx.noAnimation == null ? null : ctx.noAnimation.nzNoAnimation))(\"@treeCollapseMotion\", ctx._nodeOutlet.viewContainer.length);\n    } }, directives: [NzTreeNodeOutletDirective], encapsulation: 2, data: { animation: [treeCollapseMotion] }, changeDetection: 0 });\nNzTreeViewComponent.propDecorators = {\n    nodeOutlet: [{ type: ViewChild, args: [NzTreeNodeOutletDirective, { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeViewComponent, [{\n        type: Component,\n        args: [{\n                selector: 'nz-tree-view',\n                exportAs: 'nzTreeView',\n                template: `\n    <div class=\"ant-tree-list-holder\">\n      <div\n        [@.disabled]=\"!_afterViewInit || noAnimation?.nzNoAnimation\"\n        [@treeCollapseMotion]=\"_nodeOutlet.viewContainer.length\"\n        class=\"ant-tree-list-holder-inner\"\n      >\n        <ng-container nzTreeNodeOutlet></ng-container>\n      </div>\n    </div>\n  `,\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                providers: [\n                    { provide: CdkTree, useExisting: NzTreeViewComponent },\n                    { provide: NzTreeView, useExisting: NzTreeViewComponent }\n                ],\n                host: {\n                    class: 'ant-tree',\n                    '[class.ant-tree-block-node]': 'nzDirectoryTree || nzBlockNode',\n                    '[class.ant-tree-directory]': 'nzDirectoryTree',\n                    '[class.ant-tree-rtl]': `dir === 'rtl'`\n                },\n                animations: [treeCollapseMotion]\n            }]\n    }], null, { nodeOutlet: [{\n            type: ViewChild,\n            args: [NzTreeNodeOutletDirective, { static: true }]\n        }] }); })();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nconst DEFAULT_SIZE = 28;\nclass NzTreeVirtualScrollViewComponent extends NzTreeView {\n    constructor() {\n        super(...arguments);\n        this.itemSize = DEFAULT_SIZE;\n        /**\n         * @deprecated use `nzItemSize` instead\n         * @breaking-change 12.0.0\n         */\n        this.nzNodeWidth = DEFAULT_SIZE;\n        this.nzItemSize = DEFAULT_SIZE;\n        this.nzMinBufferPx = DEFAULT_SIZE * 5;\n        this.nzMaxBufferPx = DEFAULT_SIZE * 10;\n        this.nodes = [];\n    }\n    renderNodeChanges(data) {\n        this.nodes = new Array(...data).map((n, i) => this.createNode(n, i));\n    }\n    createNode(nodeData, index) {\n        const node = this._getNodeDef(nodeData, index);\n        const context = new CdkTreeNodeOutletContext(nodeData);\n        if (this.treeControl.getLevel) {\n            context.level = this.treeControl.getLevel(nodeData);\n        }\n        else {\n            context.level = 0;\n        }\n        return {\n            data: nodeData,\n            context,\n            nodeDef: node\n        };\n    }\n    ngOnChanges(changes) {\n        const { nzNodeWidth, nzItemSize } = changes;\n        if (nzNodeWidth) {\n            warnDeprecation('`nzNodeWidth` in nz-tree-virtual-scroll-view will be removed in 12.0.0, please use `nzItemSize` instead.');\n            this.itemSize = nzNodeWidth.currentValue;\n        }\n        if (nzItemSize) {\n            this.itemSize = nzItemSize.currentValue;\n        }\n    }\n}\nNzTreeVirtualScrollViewComponent.ɵfac = /*@__PURE__*/ function () { let ɵNzTreeVirtualScrollViewComponent_BaseFactory; return function NzTreeVirtualScrollViewComponent_Factory(t) { return (ɵNzTreeVirtualScrollViewComponent_BaseFactory || (ɵNzTreeVirtualScrollViewComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(NzTreeVirtualScrollViewComponent)))(t || NzTreeVirtualScrollViewComponent); }; }();\nNzTreeVirtualScrollViewComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NzTreeVirtualScrollViewComponent, selectors: [[\"nz-tree-virtual-scroll-view\"]], viewQuery: function NzTreeVirtualScrollViewComponent_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(NzTreeNodeOutletDirective, 7);\n        ɵngcc0.ɵɵviewQuery(CdkVirtualScrollViewport, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.virtualScrollViewport = _t.first);\n    } }, hostAttrs: [1, \"ant-tree\"], hostVars: 6, hostBindings: function NzTreeVirtualScrollViewComponent_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-tree-block-node\", ctx.nzDirectoryTree || ctx.nzBlockNode)(\"ant-tree-directory\", ctx.nzDirectoryTree)(\"ant-tree-rtl\", ctx.dir === \"rtl\");\n    } }, inputs: { nzNodeWidth: \"nzNodeWidth\", nzItemSize: \"nzItemSize\", nzMinBufferPx: \"nzMinBufferPx\", nzMaxBufferPx: \"nzMaxBufferPx\" }, exportAs: [\"nzTreeVirtualScrollView\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: NzTreeView, useExisting: NzTreeVirtualScrollViewComponent },\n            { provide: CdkTree, useExisting: NzTreeVirtualScrollViewComponent }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], decls: 4, vars: 4, consts: [[1, \"ant-tree-list\"], [1, \"ant-tree-list-holder\", 3, \"itemSize\", \"minBufferPx\", \"maxBufferPx\"], [4, \"cdkVirtualFor\", \"cdkVirtualForOf\"], [\"nzTreeNodeOutlet\", \"\"], [\"nzTreeVirtualScrollNodeOutlet\", \"\", 3, \"data\"]], template: function NzTreeVirtualScrollViewComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"cdk-virtual-scroll-viewport\", 1);\n        ɵngcc0.ɵɵtemplate(2, NzTreeVirtualScrollViewComponent_ng_container_2_Template, 2, 1, \"ng-container\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementContainer(3, 3);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"itemSize\", ctx.itemSize)(\"minBufferPx\", ctx.nzMinBufferPx)(\"maxBufferPx\", ctx.nzMaxBufferPx);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"cdkVirtualForOf\", ctx.nodes);\n    } }, directives: [ɵngcc4.CdkVirtualScrollViewport, ɵngcc4.CdkFixedSizeVirtualScroll, ɵngcc4.CdkVirtualForOf, NzTreeNodeOutletDirective, NzTreeVirtualScrollNodeOutletDirective], encapsulation: 2, changeDetection: 0 });\nNzTreeVirtualScrollViewComponent.propDecorators = {\n    nodeOutlet: [{ type: ViewChild, args: [NzTreeNodeOutletDirective, { static: true },] }],\n    virtualScrollViewport: [{ type: ViewChild, args: [CdkVirtualScrollViewport, { static: true },] }],\n    nzNodeWidth: [{ type: Input }],\n    nzItemSize: [{ type: Input }],\n    nzMinBufferPx: [{ type: Input }],\n    nzMaxBufferPx: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeVirtualScrollViewComponent, [{\n        type: Component,\n        args: [{\n                selector: 'nz-tree-virtual-scroll-view',\n                exportAs: 'nzTreeVirtualScrollView',\n                template: `\n    <div class=\"ant-tree-list\">\n      <cdk-virtual-scroll-viewport\n        class=\"ant-tree-list-holder\"\n        [itemSize]=\"itemSize\"\n        [minBufferPx]=\"nzMinBufferPx\"\n        [maxBufferPx]=\"nzMaxBufferPx\"\n      >\n        <ng-container *cdkVirtualFor=\"let item of nodes; let i = index\">\n          <ng-template nzTreeVirtualScrollNodeOutlet [data]=\"item\"></ng-template>\n        </ng-container>\n      </cdk-virtual-scroll-viewport>\n    </div>\n    <ng-container nzTreeNodeOutlet></ng-container>\n  `,\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                providers: [\n                    { provide: NzTreeView, useExisting: NzTreeVirtualScrollViewComponent },\n                    { provide: CdkTree, useExisting: NzTreeVirtualScrollViewComponent }\n                ],\n                host: {\n                    class: 'ant-tree',\n                    '[class.ant-tree-block-node]': 'nzDirectoryTree || nzBlockNode',\n                    '[class.ant-tree-directory]': 'nzDirectoryTree',\n                    '[class.ant-tree-rtl]': `dir === 'rtl'`\n                }\n            }]\n    }], null, { nzNodeWidth: [{\n            type: Input\n        }], nzItemSize: [{\n            type: Input\n        }], nzMinBufferPx: [{\n            type: Input\n        }], nzMaxBufferPx: [{\n            type: Input\n        }], nodeOutlet: [{\n            type: ViewChild,\n            args: [NzTreeNodeOutletDirective, { static: true }]\n        }], virtualScrollViewport: [{\n            type: ViewChild,\n            args: [CdkVirtualScrollViewport, { static: true }]\n        }] }); })();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nconst treeWithControlComponents = [\n    NzTreeView,\n    NzTreeNodeOutletDirective,\n    NzTreeViewComponent,\n    NzTreeNodeDefDirective,\n    NzTreeNodeComponent,\n    NzTreeNodeToggleDirective,\n    NzTreeNodePaddingDirective,\n    NzTreeNodeToggleRotateIconDirective,\n    NzTreeNodeToggleActiveIconDirective,\n    NzTreeNodeOptionComponent,\n    NzTreeNodeNoopToggleDirective,\n    NzTreeNodeCheckboxComponent,\n    NzTreeNodeIndentsComponent,\n    NzTreeVirtualScrollViewComponent,\n    NzTreeVirtualScrollNodeOutletDirective,\n    NzTreeNodeIndentLineDirective\n];\nclass NzTreeViewModule {\n}\nNzTreeViewModule.ɵfac = function NzTreeViewModule_Factory(t) { return new (t || NzTreeViewModule)(); };\nNzTreeViewModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NzTreeViewModule });\nNzTreeViewModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[BidiModule, CommonModule, NzNoAnimationModule, ScrollingModule]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeViewModule, [{\n        type: NgModule,\n        args: [{\n                imports: [BidiModule, CommonModule, NzNoAnimationModule, ScrollingModule],\n                declarations: [treeWithControlComponents],\n                exports: [treeWithControlComponents]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NzTreeViewModule, { declarations: function () { return [NzTreeView, NzTreeNodeOutletDirective, NzTreeViewComponent, NzTreeNodeDefDirective, NzTreeNodeComponent, NzTreeNodeToggleDirective, NzTreeNodePaddingDirective, NzTreeNodeToggleRotateIconDirective, NzTreeNodeToggleActiveIconDirective, NzTreeNodeOptionComponent, NzTreeNodeNoopToggleDirective, NzTreeNodeCheckboxComponent, NzTreeNodeIndentsComponent, NzTreeVirtualScrollViewComponent, NzTreeVirtualScrollNodeOutletDirective, NzTreeNodeIndentLineDirective]; }, imports: function () { return [BidiModule, CommonModule, NzNoAnimationModule, ScrollingModule]; }, exports: function () { return [NzTreeView, NzTreeNodeOutletDirective, NzTreeViewComponent, NzTreeNodeDefDirective, NzTreeNodeComponent, NzTreeNodeToggleDirective, NzTreeNodePaddingDirective, NzTreeNodeToggleRotateIconDirective, NzTreeNodeToggleActiveIconDirective, NzTreeNodeOptionComponent, NzTreeNodeNoopToggleDirective, NzTreeNodeCheckboxComponent, NzTreeNodeIndentsComponent, NzTreeVirtualScrollViewComponent, NzTreeVirtualScrollNodeOutletDirective, NzTreeNodeIndentLineDirective]; } }); })();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTreeFlattener {\n    constructor(transformFunction, getLevel, isExpandable, getChildren) {\n        this.transformFunction = transformFunction;\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.getChildren = getChildren;\n    }\n    flattenNode(node, level, resultNodes, parentMap) {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n        if (this.isExpandable(flatNode)) {\n            const childrenNodes = this.getChildren(node);\n            if (childrenNodes) {\n                if (Array.isArray(childrenNodes)) {\n                    this.flattenChildren(childrenNodes, level, resultNodes, parentMap);\n                }\n                else {\n                    childrenNodes.pipe(take(1)).subscribe(children => {\n                        this.flattenChildren(children, level, resultNodes, parentMap);\n                    });\n                }\n            }\n        }\n        return resultNodes;\n    }\n    flattenChildren(children, level, resultNodes, parentMap) {\n        children.forEach((child, index) => {\n            const childParentMap = parentMap.slice();\n            childParentMap.push(index !== children.length - 1);\n            this.flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData) {\n        const resultNodes = [];\n        structuredData.forEach(node => this.flattenNode(node, 0, resultNodes, []));\n        return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes, treeControl) {\n        const results = [];\n        const currentExpand = [];\n        currentExpand[0] = true;\n        nodes.forEach(node => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n            if (expand) {\n                results.push(node);\n            }\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n        return results;\n    }\n}\nclass NzTreeFlatDataSource extends DataSource {\n    constructor(_treeControl, _treeFlattener, initialData = []) {\n        super();\n        this._treeControl = _treeControl;\n        this._treeFlattener = _treeFlattener;\n        this._flattenedData = new BehaviorSubject([]);\n        this._expandedData = new BehaviorSubject([]);\n        this._data = new BehaviorSubject(initialData);\n        this.flatNodes();\n    }\n    setData(value) {\n        this._data.next(value);\n        this.flatNodes();\n    }\n    getData() {\n        return this._data.getValue();\n    }\n    connect(collectionViewer) {\n        const changes = [collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData];\n        return merge(...changes).pipe(map(() => {\n            this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n            return this._expandedData.value;\n        }));\n    }\n    disconnect() {\n        // no op\n    }\n    flatNodes() {\n        this._flattenedData.next(this._treeFlattener.flattenNodes(this.getData()));\n        this._treeControl.dataNodes = this._flattenedData.value;\n    }\n}\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzTreeFlatDataSource, NzTreeFlattener, NzTreeNodeCheckboxComponent, NzTreeNodeComponent, NzTreeNodeDefDirective, NzTreeNodeIndentLineDirective, NzTreeNodeIndentsComponent, NzTreeNodeNoopToggleDirective, NzTreeNodeOptionComponent, NzTreeNodeOutletDirective, NzTreeNodePaddingDirective, NzTreeNodeToggleActiveIconDirective, NzTreeNodeToggleDirective, NzTreeNodeToggleRotateIconDirective, NzTreeViewComponent, NzTreeViewModule, NzTreeVirtualScrollNodeOutletDirective, NzTreeVirtualScrollViewComponent, getNextSibling, getParent, NzTreeView as ɵa };\n\n//# sourceMappingURL=ng-zorro-antd-tree-view.js.map"]},"metadata":{},"sourceType":"module"}